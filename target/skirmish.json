{"noir_version":"0.30.0+af57471035e4fa7eaffa71693219df6d029dbcde","hash":7127516080964305838,"abi":{"parameters":[{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"my_characters","type":{"kind":"field"},"visibility":"private"},{"name":"their_characters","type":{"kind":"field"},"visibility":"private"},{"name":"actions","type":{"kind":"array","length":5,"type":{"kind":"field"}},"visibility":"private"},{"name":"traps","type":{"kind":"field"},"visibility":"private"},{"name":"searched_traps","type":{"kind":"field"},"visibility":"private"},{"name":"move","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"map_old","type":{"kind":"array","length":10,"type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},"visibility":"private"},{"name":"map_new","type":{"kind":"array","length":10,"type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},"visibility":"private"},{"name":"received_events","type":{"kind":"array","length":8,"type":{"kind":"field"}},"visibility":"public"},{"name":"sending_events","type":{"kind":"array","length":8,"type":{"kind":"field"}},"visibility":"public"},{"name":"gamestate_before_hash","type":{"kind":"field"},"visibility":"public"},{"name":"gamestate_after_hash","type":{"kind":"field"},"visibility":"public"}],"param_witnesses":{"actions":[{"start":3,"end":8}],"gamestate_after_hash":[{"start":668,"end":669}],"gamestate_before_hash":[{"start":667,"end":668}],"map_new":[{"start":331,"end":651}],"map_old":[{"start":11,"end":331}],"move":[{"start":10,"end":11}],"my_characters":[{"start":1,"end":2}],"received_events":[{"start":651,"end":659}],"searched_traps":[{"start":9,"end":10}],"secret":[{"start":0,"end":1}],"sending_events":[{"start":659,"end":667}],"their_characters":[{"start":2,"end":3}],"traps":[{"start":8,"end":9}]},"return_type":null,"return_witnesses":[],"error_types":{"2101831866778210340":{"error_kind":"fmtstring","length":33,"item_types":[{"kind":"field"},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","file_map":{"22":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"46":{"source":"use crate::game::Game;\nuse crate::character::Character;\nuse crate::EVENT_COUNT;\nuse crate::NO_EVENT;\nuse crate::SEE_MOVE;\nuse crate::SEE_RITUAL;\nuse crate::SEE_CAST;\nuse crate::SEE_DRAW;\nuse crate::SEE_SEARCH_TRAP;\nuse crate::RECEIVE_ATTACK;\nuse crate::TRIGGERED_TRAP;\nuse crate::WIN;\nuse crate::FOUND_TRAP;\nuse crate::SEE_CHARS;\nuse crate::RECEIVE_DAMAGE;\nuse crate::DESTROY;\nuse crate::DEATH;\nuse crate::MAX_TRAPS;\nuse crate::map::Map;\nuse crate::trap::Trap;\nuse crate::WALL;\nuse crate::EMPTY;\nuse crate::ATTACK_FIREBALL;\nuse crate::Result;\nuse crate::TRAPS_BUFFER_MASK;\nuse dep::std;\n\n// trait Event {\n//     fn to_field(self) -> Field;\n//     fn process<T, U>(self, game: &mut T) where U: Character, T: Game<U>;\n// }\n\nstruct Event {\n    event: u8,\n    actor_id: u8,\n    subtype: u8,\n    x: u8,\n    y: u8,\n    value: u8,\n}\n\nfn handle_see_move(game: &mut Game, actor_id: u8, x: u8, y: u8) -> bool {\n    //assert(actor_id < 5);\n    // let actor_result = game.get_their_char(actor_id);\n    // assert(actor_result.success);\n    true\n    // let mut result = false;\n    // if actor_id < 5 {\n    //     let mut actor_result = game.get_their_char(actor_id);\n    //     if actor_result.success {\n    //         let mut actor = actor_result.value;\n    //         let is_neighbor_result = Map::is_neighbor(actor.get_x(), actor.get_y(), x, y);\n    //         if is_neighbor_result.success {\n    //             if is_neighbor_result.value {\n    //                 let can_move_to = game.map.can_move_to(x, y);\n    //                 if can_move_to.success & can_move_to.value {\n    //                     result = actor.set_pos(x, y);\n    //                     //result = true;\n    //                 }\n    //             }\n    //         }\n    //     }\n    // }\n    // result\n}\n\n#[test]\nfn test_handle_see_move() {\n    let mut game = crate::game::get_test_game();\n    let their_char = game.get_their_char(0).value;\n    assert(their_char.get_x() == 22);\n    assert(their_char.get_y() == 2);\n    let result = handle_see_move(&mut game, 0, 21, 2);\n    assert(result == true);\n}\n\n#[test]\nfn test_handle_see_move_fail() {\n    let mut game = crate::game::get_test_game();\n    let result = handle_see_move(&mut game, 5, 1, 2);\n    assert(result == false);\n    let result2 = handle_see_move(&mut game, 0, 1, 2);\n    assert(result2 == false);\n}\n\nfn get_accumulated_trap_damage(game: &mut Game, x: u8, y: u8) -> u8 {\n    let mut dmg = 0 as u8;\n    let mut traps_count = game.get_trap_count();\n    for i in 0..MAX_TRAPS {\n        let mut trap_result = game.get_trap(i);\n        if i < traps_count {\n            let mut trap = trap_result.value;\n            if (trap.x == x) & (trap.y == y) & (*trap.sprung == 0) {\n                *trap.sprung = 1;\n                dmg += trap.damage;\n            }\n        }\n    }\n    dmg\n}\n\nfn handle_see_progress(game: &mut Game, actor_id: u8, value: u8) -> bool {\n    let mut result = false;\n    if actor_id < 5 {\n        let mut actor_result = Game::get_their_char(*game, actor_id);\n        if actor_result.success {\n            let mut actor = actor_result.value;\n            if (actor.get_status() == 0) | (actor.get_status() + 1 == value) {\n                result = actor.set_status(actor.status + 1);\n            }\n        }\n    }\n    result\n}\n\n#[test]\nfn test_handle_see_progress() {\n    let mut game = crate::game::get_test_game();\n    let result = handle_see_progress(&mut game, 0, 1);\n    assert(result == true);\n}\n\n#[test]\nfn test_handle_see_progress_fail() {\n    let mut game = crate::game::get_test_game();\n    let result = handle_see_progress(&mut game, 5, 1);\n    assert(result == false);\n    let result2 = handle_see_progress(&mut game, 0, 1);\n    assert(result2 == true);\n    let result3 = handle_see_progress(&mut game, 0, 3);\n    assert(result3 == false);\n}\n\n/**\n    * @dev Handles the SEE_SEARCH_TRAP event.\n    * @param game The game instance.\n    * @param actor_id The id of the actor.\n    * @param x The x coordinate of the search location.\n    * @param y The y coordinate of the search location.\n    * @return Event != 0 if the event was successfully processed and a trap was found, 0 otherwise.\n    */\nfn handle_see_search_trap(game: Game, actor_id: u8, x: u8, y: u8) -> Field {\n    let actor_result = game.get_their_char(actor_id);\n    let is_neighbor_result = Map::is_neighbor(actor_result.value.get_x(), actor_result.value.get_y(), x, y);\n\n    let mut found = false;\n    let mut success = actor_result.success & is_neighbor_result.success;\n    let mut event: Field = 0;\n    for i in 0..MAX_TRAPS {\n        let trap_result = game.get_trap(i);\n        success &= trap_result.success;\n        if success & !found {\n            if (trap_result.value.x == x) & (trap_result.value.y == y) {\n                found = true;\n                event = build_std_event(FOUND_TRAP, actor_id, x, y);\n            }\n        }\n    }\n    event\n    // if found {\n    //     success &= game.add_event(event);\n    // }\n    //success & game.add_event(event)\n    // let mut result = false;\n    // let traps_count = (*game).get_trap_count() as u8;\n    // if actor_id < 5 {\n    //     let mut actor_result = (*game).get_their_char(actor_id);\n    //     if actor_result.success {\n    //         let actor = actor_result.value;\n    //         let is_neighbor_result = Map::is_neighbor(*actor, x, y);\n    //         if is_neighbor_result.success {\n    //             if is_neighbor_result.value {\n    //                 let mut found = false;\n    //                 for j in 0..10 {\n    //                     if (j < traps_count & !found) {\n    //                         let trap = (*game).get_trap(j);\n    //                         //let k = _handle_see_search_trap(*game, j, x, y);\n    //                         // if found {\n    //                         //     result = game.add_event(0); //build_std_event(FOUND_TRAP, actor_id, x, y));\n    //                         // }\n    //                         //found = _handle_see_search_trap(*game, j, x, y);\n    //                         result = true;\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //     }\n    // }\n    // result\n}\n\n#[test]\nfn test_handle_see_search_trap() {\n    let mut game = crate::game::get_test_game();\n    assert(game.add_my_trap(Trap { x: 1, y: 2, sprung: &mut 0, damage: 64 }));\n    let result = handle_see_search_trap(game, 0, 1, 2);\n    assert(result != 0);\n    \n    let not_found = handle_see_search_trap(game, 0, 2, 2);\n    assert(not_found == 0);\n}\n\nfn handle_receive_attack(my_chars: [&mut Character; 5], map: &mut Map, x: u8, y: u8, dmg: u8, subtype: u8) -> Result<[Field; 8]> {\n    let mut success = true;\n    let mut event_counter = 0;\n    let mut result: [Field; 8] = [0; 8];\n    let splash_dmg: u8 = dmg >> 1;\n    for j in 0..5 {\n        // let my_char_result = game.get_my_char(j);\n        // success &= my_char_result.success;\n        // let my_char = my_char_result.value;\n        let my_char = my_chars[j];\n\n        if (my_char.get_x() == x) & (my_char.get_y() == y) { /////////////events and actions: rethink the be/le stuff!\n            //if !Character::set_status(my_char, 0) { false }\n            // if dmg >= my_char.get_health() {\n            //     //if !Character::set_health(my_char, 0) { false }\n            //     //let add_event_result = game.add_event(build_std_event(DEATH, j, self.x, self.y));\n            //     //if !add_event_result { false }\n            //     result[event_counter & 7] = build_std_event(DEATH, j, x, y);\n            //     event_counter += 1;\n            // } else {\n                // if !Character::set_health(my_char, my_char.get_health() - self.value) { false }\n                // let add_event_result = game.add_event(build_value_event(RECEIVE_DAMAGE, j, self.x, self.y, self.value));\n                // if !add_event_result { false }\n                success &= my_char.set_status(0);\n                if dmg >= my_char.get_health() {\n                    success &= my_char.set_health(0);\n                    result[event_counter & 7] = build_std_event(DEATH, j, x, y);\n                } else {\n                    success &= my_char.set_health(my_char.get_health() - dmg);\n                    result[event_counter & 7] = build_value_event(RECEIVE_DAMAGE, j, x, y, dmg);\n                }\n                event_counter += 1;\n            // }\n        } else {\n            if subtype == ATTACK_FIREBALL {\n                let is_neighbor_result = Map::is_neighbor(my_char.get_x(), my_char.get_y(), x, y);\n                success &= is_neighbor_result.success;\n                if is_neighbor_result.value {\n                    success &= my_char.set_status(0);\n                    if splash_dmg >= my_char.get_health() {\n                        success &= my_char.set_health(0);\n                        result[event_counter & 7] = build_std_event(DEATH, j, my_char.get_x(), my_char.get_y());\n                    } else {\n                        success &= my_char.set_health(my_char.get_health() - splash_dmg);\n                        result[event_counter & 7] = build_value_event(RECEIVE_DAMAGE, j, my_char.get_x(), my_char.get_y(), splash_dmg);\n                    }\n                    // if splash_dmg >= my_char.get_health() {\n                    //     // if !Character::set_health(my_char, 0) { false }\n                    //     // let add_event_result = game.add_event(build_std_event(DEATH, j, x, y));\n                    //     // if !add_event_result { false }\n                    //     result[event_counter & 7] = build_std_event(DEATH, j, my_char.get_x(), my_char.get_y());\n                    //     event_counter += 1;\n                    // } else {\n                        // if !Character::set_health(my_char, my_char.get_health() - splash_dmg) { false }\n                        // let add_event_result = game.add_event(build_value_event(RECEIVE_DAMAGE, j, self.x, self.y, splash_dmg));\n                        // if !add_event_result { false }\n                        // result[event_counter & 7] = build_value_event(RECEIVE_DAMAGE, j, my_char.get_x(), my_char.get_y(), splash_dmg);\n                        event_counter += 1;\n                    // }\n                }\n            }\n        }\n    }\n\n    let tile_result = map.get(x, y);\n    success &= tile_result.success;\n    if tile_result.value == WALL {\n        //if !game.set_tile(self.x, self.y, EMPTY) { false }\n        //if !game.add_event(build_std_event(DESTROY, tile, self.x, self.y)) { false }\n        result[event_counter & 7] = build_std_event(DESTROY, tile_result.value, x, y);\n    }\n    Result {\n        success: success,\n        value: result\n    }\n}\n\n#[test]\nfn test_handle_receive_attack() {\n    let mut game = crate::game::get_test_game();\n    let mut my_chars = crate::game::get_test_my_chars();\n    let char1 = my_chars[0]; //game.get_my_char(0).value;\n    let char2 = my_chars[1]; //game.get_my_char(1).value;\n    let char3 = my_chars[2]; //game.get_my_char(2).value;\n\n    let result = handle_receive_attack(my_chars, game.map, char2.get_x(), char2.get_y(), 128, ATTACK_FIREBALL);\n    assert(result.success == true);\n    let ev0 = result.value[0];\n    let ev0_should = build_value_event(RECEIVE_DAMAGE, 0, char1.get_x(), char1.get_y(), 64);\n    assert(ev0 == ev0_should, f\"event 0: {ev0} != {ev0_should}\");\n    let ev1 = result.value[1];\n    let ev1_should = build_std_event(DEATH, 1, char2.get_x(), char2.get_y());\n    assert(ev1 == ev1_should, f\"event 1: {ev1} != {ev1_should}\");\n    let ev2 = result.value[2];\n    let ev2_should = build_value_event(RECEIVE_DAMAGE, 2, char3.get_x(), char3.get_y(), 64);\n    assert(ev2 == ev2_should, f\"event 2: {ev2} != {ev2_should}\");\n    assert(result.value[3] == 0);\n    assert(result.value[4] == 0);\n    assert(result.value[5] == 0);\n    assert(result.value[6] == 0);\n    assert(result.value[7] == 0);\n}\n\n// TODO: handle multiple traps on the same field!\nfn handle_trigger_trap(game: &mut Game, my_char: &mut Character, x: u8, y: u8, value: u8) -> Result<Field> {\n    // let my_char_result = game.get_my_char(actor_id);\n    // //if !my_char_result.success { false }\n    let mut success = true; //my_char_result.success;\n    // let my_char = my_char_result.value;\n    let mut found: u8 = 0;\n    let mut not_found: u8 = 1;\n\n    let traps_count = game.get_their_trap_count();\n    for j in 0..MAX_TRAPS {\n        let mut trap_result = game.get_their_trap(j);\n        if j < traps_count {\n            success &= trap_result.success;\n            // if !trap_result.success { false }\n            let mut trap = trap_result.value;\n\n            if (trap.x == x) & (trap.y == y) & (*trap.sprung == 0) {\n                *trap.sprung = 1;\n                found = 1;\n                not_found = 0;\n                // if !my_char.set_status(0) { false }\n                // if value >= my_char.get_health() {\n                //     if !my_char.set_health(0) { false }\n                //     game.add_event(build_std_event(DEATH, my_char.get_id(), x, y))\n                // } else {\n                //     if !my_char.set_health(my_char.get_health() - value) { false }\n                //     game.add_event(build_value_event(RECEIVE_DAMAGE, my_char.get_id(), x, y, value))\n                // }\n            }\n        }\n    }\n    let searched_trap_count = game.searched_trap_count;\n    let next_trap_pos = TRAPS_BUFFER_MASK & searched_trap_count;\n    let old_trap = game.searched_traps[next_trap_pos];\n    let mut sprung = not_found | (*old_trap.sprung & found);\n    let perhaps_missing_trap = Trap {\n        x: (x * not_found) | (old_trap.x * found),\n        y: (y * not_found) | (old_trap.y * found),\n        sprung: &mut sprung,\n        damage: (value * not_found) | (old_trap.damage * found),\n    };\n    game.searched_traps[next_trap_pos] = perhaps_missing_trap;\n    (*game).searched_trap_count = searched_trap_count + not_found as u64;\n\n    // if !found {\n    //     perhaps_missing_trap.x = x;\n    //     perhaps_missing_trap.y = y;\n    //     //*perhaps_missing_trap.sprung = 1;\n    //     perhaps_missing_trap.damage = value;\n    //     //*game.searched_trap_count = searched_trap_count + 1;\n    // }\n    //game.searched_traps[next_trap_pos] = perhaps_missing_trap;\n    //     assert(MAX_TRAPS <= TRAPS_BUFFER_SIZE);\n    //     let tc = *self.searched_trap_count;\n    //     self.searched_traps[tc & TRAPS_BUFFER_MASK] = trap;\n    //     *self.searched_trap_count = tc + 1;\n    //     tc < MAX_TRAPS\n    // let mut perhaps_missing_trap = Trap { x: x, y: y, sprung: &mut 1, damage: value };\n    // if !found {\n    //     success &= game.add_their_trap(perhaps_missing_trap);\n    // }\n\n    success &= (found == 1) | (searched_trap_count < MAX_TRAPS);\n    success &= my_char.set_status(0);\n    if value >= my_char.get_health() {\n        //success &= my_char.set_health(0);\n        //game.add_event(build_std_event(DEATH, my_char.get_id(), x, y))\n        Result {\n            success: success,\n            value: build_std_event(DEATH, my_char.get_id(), x, y)\n        }\n    } else {\n        success &= my_char.set_health(my_char.get_health() - value);\n        if my_char.get_has_been_seen() == 1 {\n            //game.add_event(build_value_event(RECEIVE_DAMAGE, my_char.get_id(), x, y, value))\n            Result {\n                success: success,\n                value: build_value_event(RECEIVE_DAMAGE, my_char.get_id(), x, y, value)\n            }\n        } else {\n            Result {\n                success: success,\n                value: 0\n            }\n        }\n    }\n}\n\n#[test]\nfn test_handle_trigger_trap() {\n    let mut game = crate::game::get_test_game();\n    let mut char2 = crate::character::get_test_my_character(1, 2, 3, 4); // game.get_my_char(1).value;\n\n    let result = handle_trigger_trap(&mut game, &mut char2, char2.get_x(), char2.get_y(), 32);\n    assert(result.success == true);\n    assert(result.value == 0); // we have not been spotted yet!\n    assert(char2.get_health() == 68);\n\n    assert(char2.set_has_been_seen(1));\n    let result2 = handle_trigger_trap(&mut game, &mut char2, char2.get_x(), char2.get_y(), 32);\n    assert(result2.success == true);\n    assert(result2.value == build_value_event(RECEIVE_DAMAGE, 1, char2.get_x(), char2.get_y(), 32));\n    assert(char2.get_health() == 36);\n\n    let result3 = handle_trigger_trap(&mut game, &mut char2, char2.get_x(), char2.get_y(), 64);\n    let ev0 = result3.value;\n    let ev0_should = build_std_event(DEATH, 1, char2.get_x(), char2.get_y());\n    assert(ev0 == ev0_should, f\"event 3: {ev0} != {ev0_should}\");\n}\n\nimpl Event {\n    fn to_field(self) -> Field {\n        build_std_event(self.event, self.actor_id, self.x, self.y)\n    }\n\n    fn process(self, game: &mut Game) -> bool {\n        let mut result = true;\n        if self.event >= EVENT_COUNT { result = false; }\n        if self.event == NO_EVENT {\n            result = true;\n        }\n        if self.event == SEE_MOVE {\n            assert(self.actor_id < 5);\n            // let actor_result = game.get_their_char(self.actor_id);\n            // assert(actor_result.success);\n        // let mut result = false;\n        // if actor_id < 5 {\n        //     let mut actor_result = game.get_their_char(actor_id);\n        //     if actor_result.success {\n        //         let mut actor = actor_result.value;\n        //         let is_neighbor_result = Map::is_neighbor(actor.get_x(), actor.get_y(), x, y);\n        //         if is_neighbor_result.success {\n        //             if is_neighbor_result.value {\n        //                 let can_move_to = game.map.can_move_to(x, y);\n        //                 if can_move_to.success & can_move_to.value {\n        //                     result = actor.set_pos(x, y);\n        //                     //result = true;\n        //                 }\n        //             }\n        //         }\n        //     }\n        // }\n        // result\n            //assert(game.handle_see_move(self.actor_id, self.x, self.y));\n            // let trap_dmg = get_accumulated_trap_damage(game, self.x, self.y);\n            // if trap_dmg > 0 {\n            //     result &= game.add_event(build_value_event(TRIGGERED_TRAP, self.actor_id, self.x, self.y, trap_dmg));\n            // }\n        }\n        // if (self.event == SEE_RITUAL) | (self.event == SEE_CAST) | (self.event == SEE_DRAW) {\n        //     result &= handle_see_progress(game, self.actor_id, self.value);\n        // }\n        // if self.event == SEE_SEARCH_TRAP {\n        //     let result_event = handle_see_search_trap(*game, self.actor_id, self.x, self.y);\n        //     if result_event != 0 {\n        //         result &= game.add_event(result_event);\n        //     }\n        // }\n        // if self.event == RECEIVE_ATTACK {\n        //     let result_event = handle_receive_attack(game.my_chars, game.map, self.x, self.y, self.value, self.subtype);\n        //     if result_event.success {\n        //         for i in 0..8 {\n        //             if result_event.value[i] != 0 {\n        //                 result &= game.add_event(result_event.value[i]);\n        //             }\n        //         }\n        //     } else {\n        //         result = false;\n        //     }\n        // }\n        // if self.event == TRIGGERED_TRAP { // actor_id = my_char when receive\n        //     let result_event = handle_trigger_trap(game, game.my_chars[self.actor_id], self.x, self.y, self.value);\n        //     if result_event.success {\n        //         result &= game.add_event(result_event.value);\n        //     } else {\n        //         result = false;\n        //     }\n        // }\n        // if self.event == WIN {\n        //     for i in 0..5 {\n        //         // let my_char_result = Game::get_my_char(*game, i);\n        //         // if !my_char_result.success { false }\n        //         // let my_char = my_char_result.value;\n        //         let my_char = game.my_chars[i];\n\n        //         if (my_char.get_health() > 0) {\n        //             false //the other one cheated, I did not lose, I still got alive characters!\n        //         }\n        //     }\n        //     result &= game.lose();\n        // }\n        // if self.event == FOUND_TRAP { // actor_id = my_char when receive\n        //     result &= game.add_their_trap(Trap { x: self.x, y: self.y, sprung: &mut 0, damage: self.value });\n        // }\n        // if self.event == SEE_CHARS { // actor_id = their_char when receive, got health & class\n        //     let their_char_result = game.get_their_char(self.actor_id);\n        //     result = their_char_result.success;\n        //     let their_char = their_char_result.value;\n\n        //     result &= their_char.get_has_been_seen() == 0;\n        //     result &= their_char.set_health(self.value);\n        //     result &= their_char.set_class(self.subtype);\n        // }\n        // if self.event == RECEIVE_DAMAGE { // actor_id = their_char when receive\n        //     let their_char_result = game.get_their_char(self.actor_id);\n        //     let their_health = their_char_result.value.get_health();\n\n        //     if their_health <= self.value {\n        //         result = false; // something is off\n        //     } else {\n        //         result = their_char_result.success & their_char_result.value.set_health(their_health - self.value);\n        //     }\n        // }\n        // if self.event == DESTROY { // actor_id = tile\n        //     result = game.set_tile(self.x, self.y, EMPTY);\n        // }\n        // if self.event == DEATH { // actor_id = their_char when receive\n        //     let their_char_result = game.get_their_char(self.actor_id);\n        //     result = their_char_result.success & their_char_result.value.set_health(0);\n        // }\n        result\n    }\n}\n\npub fn build_std_event(event: u8, actor_id: u8, x: u8, y: u8) -> Field {\n    std::field::bytes32_to_field([\n        0, event, actor_id, x, y, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0\n    ])\n}\n\npub fn build_value_event(event: u8, actor_id: u8, x: u8, y: u8, value: u8) -> Field {\n    std::field::bytes32_to_field([\n        0, event, actor_id, x, y, value, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0\n    ])\n}\n\npub fn build_subtype_value_event(event: u8, actor_id: u8, x: u8, y: u8, value: u8, subtype: u8) -> Field {\n    std::field::bytes32_to_field([\n        0, event, actor_id, x, y, value, subtype, 0,\n        0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0\n    ])\n}\n\npub fn parse_event(event: Field) -> Event {\n    let split = event.to_be_bytes(32);\n    Event {\n        event: split[1],\n        actor_id: split[2],\n        x: split[3],\n        y: split[4],\n        value: split[5],\n        subtype: split[6],\n    }\n}\n\n#[test]\nfn test_build_std_event() {\n    let event = build_std_event(SEE_MOVE, 1, 2, 3);\n    let parsed = parse_event(event);\n    assert(parsed.event == SEE_MOVE);\n    assert(parsed.actor_id == 1);\n    assert(parsed.x == 2);\n    assert(parsed.y == 3);\n}\n\n#[test]\nfn test_build_value_event() {\n    let event = build_value_event(RECEIVE_DAMAGE, 1, 2, 3, 4);\n    let parsed = parse_event(event);\n    assert(parsed.event == RECEIVE_DAMAGE);\n    assert(parsed.actor_id == 1);\n    assert(parsed.x == 2);\n    assert(parsed.y == 3);\n    assert(parsed.value == 4);\n}\n\n#[test]\nfn test_build_subtype_value_event() {\n    let event = build_subtype_value_event(SEE_CAST, 1, 2, 3, 4, 5);\n    let parsed = parse_event(event);\n    assert(parsed.event == SEE_CAST);\n    assert(parsed.actor_id == 1);\n    assert(parsed.x == 2);\n    assert(parsed.y == 3);\n    assert(parsed.value == 4);\n    assert(parsed.subtype == 5);\n}\n\n#[test]\nfn test_event_no_event() {\n    let mut game = crate::game::get_test_game();\n    //let my_chars = crate::game::get_test_my_chars();\n    let event = Event {\n        event: NO_EVENT,\n        actor_id: 0,\n        x: 0,\n        y: 0,\n        value: 0,\n        subtype: 0,\n    };\n    assert(event.event == NO_EVENT);\n    let result = event.process(&mut game);\n    assert(result == true);\n}","path":"/home/andreas/git_repositories/noir/skirmish/src/event.nr"},"47":{"source":"use crate::HEIGHT;\nuse crate::WIDTH;\nuse crate::NON_EMPTY_WALKABLE_TILE_MIN;\nuse crate::Result;\nuse crate::TILE_COUNT;\nuse crate::WALL;\nuse crate::WATER;\nuse crate::EMPTY;\nuse crate::UNKNOWN_CLASS_TILE;\nuse crate::UNKNOWN_CLASS;\nuse crate::character::Character;\nuse crate::TRAP;\nuse crate::TRAP_USED;\nuse crate::TRAP_FOUND;\nuse crate::MAX_TRAPS;\nuse crate::TRAPS_BUFFER_SIZE;\nuse crate::trap::Trap;\nuse crate::character::get_test_my_character;\nuse crate::character::get_test_their_character;\nuse crate::ROGUE;\nuse crate::KNIGHT;\nuse crate::MAGE;\nuse crate::RITUALIST;\nuse crate::ARCHER;\n\nstruct Map {\n    _data: [[&mut u8; WIDTH]; 16],\n}\n\nimpl Map {\n    pub fn build(data: [[u8; WIDTH]; HEIGHT]) -> Result<Map> {\n        let mut d = [[&mut 0; WIDTH]; 16];\n        let mut success = true;\n\n        for y in 0..HEIGHT {\n            for x in 0..WIDTH {\n                let tile = data[y][x];  \n                if tile >= TILE_COUNT {\n                    success = false;\n                };\n                *d[y][x] = tile;\n            }\n        }\n        Result {\n            value: Map {\n                _data: d\n            },\n            success: success,\n        }\n    }\n\n    /**\n     * Get the tile at the given coordinates.\n     * \n     * @param x The x coordinate.\n     * @param y The y coordinate.\n     * @return The tile at the given coordinates.\n     */\n    pub fn get(self, x: u8, y: u8) -> Result<u8> {\n        Result {\n            value: *self._data[y & 15][x & 31],\n            success: (y < HEIGHT) & (x < WIDTH),\n        }\n        // if (y >= HEIGHT) | (x >= WIDTH) {\n        //     Result {\n        //         value: 0,\n        //         success: false\n        //     }\n        // } else {\n        //     Result {\n        //         value: *self._data[y][x],\n        //         success: true\n        //     }\n        // }\n    }\n\n    pub fn set(mut self, x: u8, y: u8, value: u8) -> bool {\n        *self._data[y & 15][x & 31] = value;\n        (y < HEIGHT) & (x < WIDTH) & (value < TILE_COUNT)\n        // if (y >= HEIGHT) | (x >= WIDTH) | value >= TILE_COUNT {\n        //     false\n        // } else {\n        //     *self._data[y][x] = value;\n        //     true\n        // }\n    }\n\n    pub fn can_move_to(self, x: u8, y: u8) -> Result<bool> {\n        let tile = *self._data[y & 15][x & 31];\n        Result {\n            value: (y < HEIGHT) & (x < WIDTH) & (tile == 0) | (tile >= NON_EMPTY_WALKABLE_TILE_MIN),\n            success: (y < HEIGHT) & (x < WIDTH),\n        }\n        // if (y >= HEIGHT) | (x >= WIDTH) {\n        //     Result {\n        //         value: false,\n        //         success: false\n        //     }\n        // } else {\n        //     let tile_result = self.get(x, y);\n        //     if !tile_result.success {\n        //         Result {\n        //             value: false,\n        //             success: false\n        //         }\n        //     }\n        //     let tile = tile_result.value;\n        //     if (tile == 0) | (tile >= NON_EMPTY_WALKABLE_TILE_MIN) {\n        //         Result {\n        //             value: true,\n        //             success: true\n        //         }\n        //     } else {\n        //         Result {\n        //             value: false,\n        //             success: true\n        //         }\n        //     }\n        // }\n    }\n\n    pub fn is_neighbor(curr_x: u8, curr_y: u8, x: u8, y: u8) -> Result<bool> {\n        // let curr_x = actor.get_x();\n        // let curr_y = actor.get_y();\n        let success = (curr_x < WIDTH) & (curr_y < HEIGHT) & (x < WIDTH) & (y < HEIGHT); // & ((curr_x == x) | (curr_y == y)); // & ((actor.get_x() != x) | (actor.get_y() != y));\n\n        if curr_x == x {\n            if (curr_y == 0) {\n                Result { success: success, value: y <= 1 }\n            } else {\n                Result { success: success, value: (y >= curr_y - 1) & (y <= curr_y + 1) }\n            }\n        } else {\n            if (curr_x == 0) {\n                Result { success: success, value: x <= 1 }\n            } else {\n                Result { success: success, value: (x >= curr_x - 1) & (x <= curr_x + 1) }\n            }\n        }\n    }\n}\n\npub fn get_test_map(my_chars: [Character; 5], their_chars: [Character; 5], my_traps: [Trap; TRAPS_BUFFER_SIZE], their_traps: [Trap; TRAPS_BUFFER_SIZE]) -> &mut Map {\n    let mut map_result = Map::build([\n        [0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0],\n        [WALL, WALL, EMPTY,WALL, WALL, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, WALL, WALL, EMPTY,WALL, WALL],\n        [WALL, EMPTY,EMPTY,EMPTY,WALL, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, WALL, EMPTY,EMPTY,EMPTY,WALL],\n        [WALL, EMPTY,EMPTY,EMPTY,WALL, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, WALL, EMPTY,EMPTY,EMPTY,WALL],\n        [WALL, WALL, EMPTY,WALL, WALL, 0, 0, EMPTY,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, EMPTY,0, 0, WALL, WALL, EMPTY,WALL, WALL],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, WATER, WATER, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WATER, WATER, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, WATER, WATER, WATER, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WATER, WATER, WATER, 0, 0, 0, 0, 0],\n    ]);\n\n    // let my_trap_tiles = [TRAP, TRAP_USED];\n    // for i in 0..MAX_TRAPS {\n    //     let my_trap = my_traps[i];\n    //     // let tile = TRAP; //if my_trap.sprung == 1 { TRAP_USED } else { TRAP };\n    //     let old_tile = map_result.value.get(my_trap.x, my_trap.y);\n    //     assert(old_tile.success);\n    //     assert(old_tile.value == EMPTY);\n    //     //*(map_result.value._data[my_trap.y][my_trap.x]) = 0;\n    //     assert(map_result.value.set(my_trap.x, my_trap.y, my_trap_tiles[my_trap.sprung & 1]));\n    // }\n    // let their_trap_tiles = [TRAP_FOUND, TRAP_USED];\n    // for i in 0..MAX_TRAPS {\n    //     let my_trap = their_traps[i];\n    //     // let mut tile: u8 = TRAP_FOUND;\n    //     // if my_trap.sprung == 1 {\n    //     //     tile = TRAP_USED;\n    //     // }\n    //     let old_tile = map_result.value.get(my_trap.x, my_trap.y);\n    //     assert(old_tile.success);\n    //     assert(old_tile.value == EMPTY);\n    //     assert(map_result.value.set(my_trap.x, my_trap.y, their_trap_tiles[my_trap.sprung & 1]));\n    // }\n    for i in 0..5 {\n        let my_char = my_chars[i];\n        let mut tile = my_char.get_class();\n        assert(tile > 0);\n        let old_tile = map_result.value.get(my_char.get_x(), my_char.get_y());\n        assert((old_tile.success) & ((old_tile.value == EMPTY) | (old_tile.value >= NON_EMPTY_WALKABLE_TILE_MIN)));\n        assert(map_result.value.set(my_char.get_x(), my_char.get_y(), tile));\n    }\n    for i in 0..5 {\n        let my_char = their_chars[i];\n        let mut tile = my_char.get_class();\n        if tile == UNKNOWN_CLASS {\n            tile = UNKNOWN_CLASS_TILE;\n        }\n        let old_tile = map_result.value.get(my_char.get_x(), my_char.get_y());\n        assert((old_tile.success) & ((old_tile.value == EMPTY) | (old_tile.value >= NON_EMPTY_WALKABLE_TILE_MIN)));\n        assert(map_result.value.set(my_char.get_x(), my_char.get_y(), tile));\n    }\n\n    assert(map_result.success);\n    &mut map_result.value\n}\n\n#[test]\nfn test_can_move() {\n    let mut map = get_test_map(\n        [get_test_my_character(0, 2, 2, ROGUE), get_test_my_character(1, 2, 3, KNIGHT), get_test_my_character(2, 2, 4, MAGE), get_test_my_character(3, 2, 5, RITUALIST), get_test_my_character(4, 2, 6, ARCHER)],\n        [get_test_their_character(0, 22, 2, UNKNOWN_CLASS), get_test_their_character(1, 22, 3, UNKNOWN_CLASS), get_test_their_character(2, 22, 4, UNKNOWN_CLASS), get_test_their_character(3, 22, 5, UNKNOWN_CLASS), get_test_their_character(4, 22, 6, UNKNOWN_CLASS)],\n        [Trap { x: 255, y: 255, sprung: &mut 0, damage: 0 }; TRAPS_BUFFER_SIZE],\n        [Trap { x: 255, y: 255, sprung: &mut 0, damage: 0 }; TRAPS_BUFFER_SIZE],\n    );\n\n    let r1_result = map.can_move_to(7, 0);\n    assert(r1_result.success);\n    assert(r1_result.value == false);\n\n    let r2_result = map.can_move_to(6, 0);\n    assert(r2_result.success);\n    assert(r2_result.value == true);\n\n    let r3_result = map.can_move_to(0, 6);\n    assert(r3_result.success);\n    assert(r3_result.value == false);\n}\n\n\n\n// fn assert_neighbor(actor: T, x: u8, y: u8) where T: Character {\n//     assert(is_neighbor(actor, x, y));\n// }\n\n#[test]\nfn test_is_neighbor() {\n    let mut class = KNIGHT;\n    let c = Character {\n        id: 0,\n        x: 0,\n        y: 4,\n        status: 0,\n        health: 100,\n        class: class,\n        has_been_seen: 0,\n        target_x: 0,\n        target_y: 0,\n        damage: 123,\n    };\n\n    let r1_result = Map::is_neighbor(c.get_x(), c.get_y(), 0, 3);\n    assert(r1_result.success);\n    assert(r1_result.value == true);\n\n    let r2_result = Map::is_neighbor(c.get_x(), c.get_y(), 0, 5);\n    assert(r2_result.success);\n    assert(r2_result.value == true);\n\n    let r3_result = Map::is_neighbor(c.get_x(), c.get_y(), 1, 4);\n    assert(r3_result.success);\n    assert(r3_result.value == true);\n}\n\n// fn can_move_to(map: [[u8; globals::WIDTH]; globals::HEIGHT], x: u8, y: u8) -> u1 {\n//     assert(y < globals::HEIGHT);\n//     assert(x < globals::WIDTH);\n//     let tile = map[y][x];\n//     if (tile == 0) | (tile >= FLAG) { 1 }\n//     else { 0 }\n// }\n\n// #[test]\n// fn test_can_move() {\n//     let map = [\n//         [0, 0, 0, 0, 0, 0, 0, globals::WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, globals::WALL, 0, 0, 0, 0, 0, 0, 0],\n//         [0, 0, 0, 0, 0, 0, 0, globals::WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, globals::WALL, 0, 0, 0, 0, 0, 0, 0],\n//         [0, 0, 0, 0, 0, 0, 0, globals::WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, globals::WALL, 0, 0, 0, 0, 0, 0, 0],\n//         [globals::WALL, globals::WALL, EMPTY,globals::WALL, globals::WALL, 0, 0, globals::WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, globals::WALL, 0, 0, globals::WALL, globals::WALL, EMPTY,globals::WALL, globals::WALL],\n//         [globals::WALL, EMPTY,EMPTY,EMPTY,globals::WALL, 0, 0, globals::WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, globals::WALL, 0, 0, globals::WALL, EMPTY,EMPTY,EMPTY,globals::WALL],\n//         [globals::WALL, EMPTY,EMPTY,EMPTY,globals::WALL, 0, 0, globals::WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, globals::WALL, 0, 0, globals::WALL, EMPTY,EMPTY,EMPTY,globals::WALL],\n//         [globals::WALL, globals::WALL, EMPTY,globals::WALL, globals::WALL, 0, 0, EMPTY,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, EMPTY,0, 0, globals::WALL, globals::WALL, EMPTY,globals::WALL, globals::WALL],\n//         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n//         [0, 0, 0, 0, 0, 0, globals::WATER, globals::WATER, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, globals::WATER, globals::WATER, 0, 0, 0, 0, 0, 0],\n//         [0, 0, 0, 0, 0, globals::WATER, globals::WATER, globals::WATER, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, globals::WATER, globals::WATER, globals::WATER, 0, 0, 0, 0, 0],\n//     ];\n\n//     assert(can_move_to(map, 7, 0) == 0);\n//     assert(can_move_to(map, 6, 0) == 1);\n//     assert(can_move_to(map, 0, 6) == 0);\n// }\n\n\n// fn is_neighbor(actor: impl character::Character, x: u8, y: u8) -> bool {\n//     assert((actor.x < globals::WIDTH) & (actor.y < globals::HEIGHT) & (x < globals::WIDTH) & (y < globals::HEIGHT));\n//     assert((actor.x == x) | (actor.y == y));\n//     assert((actor.x != x) | (actor.y != y));\n//     if actor.x == x {\n//         if (actor.y == 0) {\n//             y == 1\n//         } else {\n//             (y == actor.y - 1) | (y == actor.y + 1)\n//         }\n//     } else {\n//         if (actor.x == 0) {\n//             x == 1\n//         } else {\n//             (x == actor.x - 1) | (x == actor.x + 1)\n//         }\n//     }\n// }\n// fn assert_neighbor(actor: Character, x: u8, y: u8) {\n//     assert(is_neighbor(actor, x, y));\n// }\n\n// #[test]\n// fn test_assert_neighbor() {\n//     let c = Character {\n//         id: 0,\n//         x: 0,\n//         y: 4,\n//         status: 0,\n//         health: 100,\n//         class: KNIGHT\n//     };\n//     assert_neighbor(c, 0, 3);\n//     assert_neighbor(c, 0, 5);\n//     assert_neighbor(c, 1, 4);\n// }\n\n// fn move_to(map: &mut [[u8; globals::WIDTH]; globals::HEIGHT], actor: &mut Character, energy: &mut u8, to_x: u8, to_y: u8) -> Field {\n//     assert(can_move_to(*map, to_x, to_y) == 1);\n//     assert(actor.class > 0);\n//     assert(actor.class < CLASS_COUNT);\n//     assert(actor.x < globals::WIDTH);\n//     assert(actor.y < globals::HEIGHT);\n//     assert(to_x < globals::WIDTH);\n//     assert(to_y < globals::HEIGHT);\n//     assert(map[actor.y][actor.x] == actor.class);\n//     assert_neighbor(*actor, to_x, to_y);\n//     if (actor.class == KNIGHT) | (actor.class == MAGE) | (actor.class == RITUALIST) {\n//         assert(*energy >= 4);\n//         *energy -= (4 as u8);\n//     } else {\n//         assert(*energy >= 3);\n//         *energy -= 3;\n//     }\n\n//     map[actor.y][actor.x] = 0; // TODO: instead of setting to 0, set to whatever it was before actor moved there!\n//     map[to_y][to_x] = actor.class;\n//     actor.x = to_x;\n//     actor.y = to_y;\n//     build_event(SEE_MOVE, actor.id, to_x, to_y)\n// }\n\n// #[test]\n// fn test_move_to() {\n//     let mut map = [\n//         [0, 0, 0, 0, 0, 0, 0, globals::WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, globals::WALL, 0, 0, 0, 0, 0, 0, 0],\n//         [0, 0, 0, 0, 0, 0, 0, globals::WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, globals::WALL, 0, 0, 0, 0, 0, 0, 0],\n//         [0, 0, 0, 0, 0, 0, 0, globals::WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, globals::WALL, 0, 0, 0, 0, 0, 0, 0],\n//         [globals::WALL, globals::WALL, EMPTY,globals::WALL, globals::WALL, 0, 0, globals::WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, globals::WALL, 0, 0, globals::WALL, globals::WALL, EMPTY,globals::WALL, globals::WALL],\n//         [globals::WALL, EMPTY,KNIGHT,EMPTY,globals::WALL, 0, 0, globals::WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, globals::WALL, 0, 0, globals::WALL, EMPTY,EMPTY,EMPTY,globals::WALL],\n//         [globals::WALL, EMPTY,EMPTY,EMPTY,globals::WALL, 0, 0, globals::WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, globals::WALL, 0, 0, globals::WALL, EMPTY,EMPTY,EMPTY,globals::WALL],\n//         [globals::WALL, globals::WALL, EMPTY,globals::WALL, globals::WALL, 0, 0, EMPTY,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, EMPTY,0, 0, globals::WALL, globals::WALL, EMPTY,globals::WALL, globals::WALL],\n//         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n//         [0, 0, 0, 0, 0, 0, globals::WATER, globals::WATER, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, globals::WATER, globals::WATER, 0, 0, 0, 0, 0, 0],\n//         [0, 0, 0, 0, 0, globals::WATER, globals::WATER, globals::WATER, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, globals::WATER, globals::WATER, globals::WATER, 0, 0, 0, 0, 0],\n//     ];\n//     let mut c = Character {\n//         id: 0,\n//         x: 2,\n//         y: 4,\n//         status: 0,\n//         health: 100,\n//         class: KNIGHT\n//     };\n//     let mut energy = 12;\n//     assert(move_to(&mut map, &mut c, &mut energy, 2, 3) == build_event(SEE_MOVE, 0, 2, 3));\n// }\n\n// fn sneak_to(map: &mut [[u8; globals::WIDTH]; globals::HEIGHT], actor: &mut Character, energy: &mut u8, to_x: u8, to_y: u8) -> Field {\n//     assert(can_move_to(*map, to_x, to_y) == 1);\n//     assert(actor.class == ROGUE);\n//     assert(actor.x < globals::WIDTH);\n//     assert(actor.y < globals::HEIGHT);\n//     assert(to_x < globals::WIDTH);\n//     assert(to_y < globals::HEIGHT);\n//     assert(*energy >= 6);\n//     *energy -= 6;\n\n//     if map[actor.y][actor.x] == ROGUE { map[actor.y][actor.x] = 0; } // TODO: instead of setting to 0, set to whatever it was before actor moved there!\n//     //map[to_y][to_x] = actor.class;\n//     actor.x = to_x;\n//     actor.y = to_y;\n//     build_event(NO_EVENT, actor.id, 255, 255)\n// }\n\n","path":"/home/andreas/git_repositories/noir/skirmish/src/map.nr"},"51":{"source":"use crate::character::Character;\nuse crate::trap::Trap;\nuse crate::trap::parse_traps;\nuse crate::trap::serialize_traps;\nuse crate::map::Map;\nuse crate::Result;\nuse crate::WIDTH;\nuse crate::HEIGHT;\nuse crate::MAX_EVENTS;\nuse crate::EMPTY;\nuse crate::EVENTS_BUFFER_SIZE;\nuse crate::EVENTS_BUFFER_MASK;\nuse crate::MAX_TRAPS;\nuse crate::TRAPS_BUFFER_SIZE;\nuse crate::TRAPS_BUFFER_MASK;\nuse crate::character::get_test_my_character;\nuse crate::character::get_test_their_character;\nuse crate::map::get_test_map;\nuse crate::ARCHER;\nuse crate::KNIGHT;\nuse crate::MAGE;\nuse crate::ROGUE;\nuse crate::RITUALIST;\nuse crate::UNKNOWN_CLASS;\nuse crate::UNKNOWN_CLASS_TILE;\nuse crate::TRAP;\nuse crate::TRAP_FOUND;\nuse crate::TRAP_USED;\nuse crate::WALL;\nuse crate::WATER;\nuse dep::std;\n\nstruct Game {\n    my_chars: [&mut Character; 5],\n    their_chars: [&mut Character; 5],\n    traps: &mut [Trap; TRAPS_BUFFER_SIZE],\n    searched_traps: &mut [Trap; TRAPS_BUFFER_SIZE],\n    map: &mut Map,\n    events: &mut [Field; EVENTS_BUFFER_SIZE],\n    events_count: u64,\n    won: bool,\n    lost: bool,\n    trap_count: u64,\n    searched_trap_count: u64,\n}\n\nimpl Game {\n    pub fn lose(&mut self) -> bool {\n        let success = !(self.lost) & !(self.won);\n        (*self).lost = true;\n        // if !self.lost & !self.won {\n        //     self.lost = true;\n        //     success = true;\n        // }\n        success\n    }\n    pub fn win(&mut self) -> bool {\n        let success = !(self.lost) & !(self.won);\n        (*self).won = true;\n        success ////////////////////////////////////////////// TODO & (*self).add_event(crate::build_std_event(crate::WIN, 0, 0, 0))\n        //success// let mut success = false;\n        // if !self.lost & !self.won {\n        //     self.won = true;\n        //     success = true;\n        //     //(*self).add_event(crate::build_std_event(crate::WIN, 0, 0, 0))\n        // }\n        // success\n    }\n    pub fn add_event(&mut self, event: Field) -> bool {\n        //assert(MAX_EVENTS == 8);\n        // let mut success = false;\n        let ec = self.events_count;\n        self.events[ec & EVENTS_BUFFER_MASK] = event;\n        (*self).events_count = ec + 1;\n        ec < MAX_EVENTS\n        // if ec < MAX_EVENTS {\n        //     self.events[ec] = event;\n        //     *self.events_count = ec + 1;\n        //     success = true;\n        // }\n        // success\n    }\n\n    pub fn get_my_char(&mut self, id: u8) -> crate::Result<&mut Character> {\n        if id < 5 {\n            crate::Result {\n                value: self.my_chars[id],\n                success: true\n            }\n        } else {\n            crate::Result {\n                value: self.my_chars[0],\n                success: false\n            }\n        }\n    }\n\n    pub fn get_their_char(self, id: u8) -> Result<&mut Character> {\n        if id < 5 {\n            Result {\n                value: self.their_chars[id],\n                success: true\n            }\n        } else {\n            Result {\n                value: self.their_chars[0],\n                success: false\n            }\n        }\n    }\n    \n    pub fn get_trap_count(self) -> u64 {\n        self.trap_count\n    }\n\n    pub fn get_trap(self, id: u64) -> Result<Trap> {\n        // let mut trap = self.traps[0];\n        // let mut success = false;\n        // if (id as u64) < *self.trap_count {\n        //     trap = self.traps[id];\n        //     success = true;\n        // }\n        Result {\n            value: self.traps[id & TRAPS_BUFFER_MASK],\n            success: id < self.trap_count\n        }\n    }\n\n    pub fn add_my_trap(&mut self, trap: Trap) -> bool {\n        assert(MAX_TRAPS <= TRAPS_BUFFER_SIZE);\n        let tc = self.trap_count;\n        self.traps[tc & TRAPS_BUFFER_MASK] = trap;\n        (*self).trap_count = tc + 1;\n        \n        // if success {\n        //     self.traps[self.trap_count] = trap;\n        //     //self.trap_count += 1;\n        // }\n        let mut tile = TRAP;\n        if *trap.sprung == 1 {\n            tile = TRAP_USED;\n        }\n        tc < MAX_TRAPS & self.map.set(trap.x, trap.y, tile)\n    }\n    \n    pub fn get_their_trap_count(self) -> u64 {\n        self.searched_trap_count\n    }\n\n    pub fn get_their_trap(self, id: u64) -> Result<Trap> {\n        Result {\n            value: self.searched_traps[id & TRAPS_BUFFER_MASK],\n            success: id < self.searched_trap_count\n        }\n        // if (id as u64) < *self.searched_trap_count {\n        //     Result {\n        //         value: self.searched_traps[id],\n        //         success: true\n        //     }\n        // } else {\n        //     Result {\n        //         value: Trap { x: 0, y: 0, sprung: &mut 0, damage: 0 },\n        //         success: false\n        //     }\n        // }\n    }\n\n    pub fn add_their_trap(&mut self, trap: Trap) -> bool {\n        assert(MAX_TRAPS <= TRAPS_BUFFER_SIZE);\n        let tc = self.searched_trap_count;\n        self.searched_traps[tc & TRAPS_BUFFER_MASK] = trap;\n        (*self).searched_trap_count = tc + 1;\n        let mut tile = TRAP_FOUND;\n        if *trap.sprung == 1 {\n            tile = TRAP_USED;\n        }\n        tc < MAX_TRAPS & self.map.set(trap.x, trap.y, tile)\n    }\n\n    pub fn get_tile(self, x: u8, y: u8) -> Result<u8> {\n        self.map.get(x, y)\n    }\n\n    pub fn set_tile(mut self, x: u8, y: u8, tile: u8) -> bool {\n        //if (x < WIDTH) & (y < HEIGHT) {\n            self.map.set(x, y, tile)\n        // } else {\n        //     false\n        // }\n    }\n\n    fn serialize_chars(chars: [&mut Character; 5]) -> Result<Field> {\n        let mut success = true;\n        let mut result: [u8; 32] = [0; 32];\n        for i in 0..5 {\n            let serialized_result = chars[i].serialize();\n            success &= serialized_result.success;\n            let serialized = serialized_result.value;\n            for j in 0..6 {\n                result[2 + i * 6 + j] = serialized[j];\n            }\n        }\n        Result {\n            value: std::field::bytes32_to_field(result),\n            success: success\n        }\n    }\n\n    // pub fn serialize_my_chars(self) -> Result<Field> {\n    //     Game::serialize_chars(self.my_chars)\n    // }\n\n    pub fn serialize_their_chars(self) -> Result<Field> {\n        Game::serialize_chars(self.their_chars)\n    }\n\n    fn handle_see_move(&mut self, actor_id: u8, x: u8, y: u8) -> bool {\n        //assert(actor_id < 5);\n        // let actor_result = game.get_their_char(actor_id);\n        // assert(actor_result.success);\n        true\n        // let mut result = false;\n        // if actor_id < 5 {\n        //     let mut actor_result = game.get_their_char(actor_id);\n        //     if actor_result.success {\n        //         let mut actor = actor_result.value;\n        //         let is_neighbor_result = Map::is_neighbor(actor.get_x(), actor.get_y(), x, y);\n        //         if is_neighbor_result.success {\n        //             if is_neighbor_result.value {\n        //                 let can_move_to = game.map.can_move_to(x, y);\n        //                 if can_move_to.success & can_move_to.value {\n        //                     result = actor.set_pos(x, y);\n        //                     //result = true;\n        //                 }\n        //             }\n        //         }\n        //     }\n        // }\n        // result\n    }\n\n    pub fn is_valid(self) -> bool {\n        false\n    }\n\n    pub fn parse_characters(chars: Field) -> Result<[Character; 5]> {\n        let Result { value: c0, success: c0_success } = Character::parse_character(0, chars);\n        let Result { value: c1, success: c1_success } = Character::parse_character(1, chars);\n        let Result { value: c2, success: c2_success } = Character::parse_character(2, chars);\n        let Result { value: c3, success: c3_success } = Character::parse_character(3, chars);\n        let Result { value: c4, success: c4_success } = Character::parse_character(4, chars);\n        Result {\n            value: [c0, c1, c2, c3, c4],\n            success: c0_success & c1_success & c2_success & c3_success & c4_success\n        }\n    }\n\n    pub fn build(my_chars: Field, their_chars: Field, my_traps: Field, their_traps: Field, map: [[u8; WIDTH]; HEIGHT]) -> crate::Result<Game> {\n        //let mut success = true;\n        let mut c0_result = Character::parse_character(0, my_chars);\n        let mut c0 = &mut c0_result.value;\n        let mut c1_result = Character::parse_character(1, my_chars);\n        let mut c1 = &mut c1_result.value;\n        let mut c2_result = Character::parse_character(2, my_chars);\n        let mut c2 = &mut c2_result.value;\n        let mut c3_result = Character::parse_character(3, my_chars);\n        let mut c3 = &mut c3_result.value;\n        let mut c4_result = Character::parse_character(4, my_chars);\n        let mut c4 = &mut c4_result.value;\n        //success &= c0_result.success & c1_result.success & c2_result.success & c3_result.success & c4_result.success;\n\n        let mut e0_result = Character::parse_character(0, their_chars);\n        let mut e0 = &mut e0_result.value;\n        let mut e1_result = Character::parse_character(1, their_chars);\n        let mut e1 = &mut e1_result.value;\n        let mut e2_result = Character::parse_character(2, their_chars);\n        let mut e2 = &mut e2_result.value;\n        let mut e3_result = Character::parse_character(3, their_chars);\n        let mut e3 = &mut e3_result.value;\n        let mut e4_result = Character::parse_character(4, their_chars);\n        let mut e4 = &mut e4_result.value;\n        //success &= e0_result.success & e1_result.success & e2_result.success & e3_result.success & e4_result.success;\n\n        let mut my_traps_result = parse_traps(my_traps);\n        let mut my_traps = my_traps_result.value;\n        let mut their_traps_result = parse_traps(their_traps);\n        let mut their_traps = their_traps_result.value;\n        //success &= my_traps_result.success & their_traps_result.success;\n        \n        let mut map_result = Map::build(map);\n        let mut my_map = &mut map_result.value;\n        //success &= map_result.success;\n\n        crate::Result {\n            value: Game {\n                my_chars: [c0, c1, c2, c3, c4],\n                their_chars: [e0, e1, e2, e3, e4],\n                traps: &mut my_traps,\n                searched_traps: &mut their_traps,\n                map: my_map,\n                events: &mut [0; MAX_EVENTS],\n                events_count: 0,\n                won: false,\n                lost: false,\n                trap_count: my_traps_result.count,\n                searched_trap_count: their_traps_result.count,\n            },\n            success: c0_result.success & c1_result.success & c2_result.success & c3_result.success & c4_result.success & e0_result.success & e1_result.success & e2_result.success & e3_result.success & e4_result.success & my_traps_result.success & their_traps_result.success & map_result.success,\n        }\n    }\n}\n\npub fn get_test_my_chars() -> [&mut Character; 5] {\n    [\n        &mut get_test_my_character(0, 2, 2, ARCHER),\n        &mut get_test_my_character(1, 2, 3, KNIGHT),\n        &mut get_test_my_character(2, 2, 4, MAGE),\n        &mut get_test_my_character(3, 2, 5, ROGUE),\n        &mut get_test_my_character(4, 2, 6, RITUALIST),\n    ]\n}\n\npub fn get_test_game() -> Game {\n    let mut c0 = get_test_my_character(0, 2, 2, ARCHER);\n    let mut c1 = get_test_my_character(1, 2, 3, KNIGHT);\n    let mut c2 = get_test_my_character(2, 2, 4, MAGE);\n    let mut c3 = get_test_my_character(3, 2, 5, ROGUE);\n    let mut c4 = get_test_my_character(4, 2, 6, RITUALIST);\n\n    let mut e0 = get_test_their_character(0, 22, 2, ARCHER);\n    let mut e1 = get_test_their_character(1, 22, 3, KNIGHT);\n    let mut e2 = get_test_their_character(2, 22, 4, MAGE);\n    let mut e3 = get_test_their_character(3, 22, 5, ROGUE);\n    let mut e4 = get_test_their_character(4, 22, 6, RITUALIST);\n\n    // let my_traps = [0; 32];\n    // let their_traps = [0; 32];\n    let mut my_traps_result = parse_traps(0x0000ffff00000000000000000000000000000000000000000000000000000000);\n    let mut my_traps = my_traps_result.value;\n    let mut their_traps_result = parse_traps(0x0000ffff00000000000000000000000000000000000000000000000000000000);\n    let mut their_traps = their_traps_result.value;\n    //let mut map = get_test_map([c0, c1, c2, c3, c4], [e0, e1, e2, e3, e4], my_traps, their_traps);\n\n    let mut map = get_test_map(\n        [c0, c1, c2, c3, c4], //[get_test_my_character(0, 2, 2, ROGUE), get_test_my_character(1, 2, 3, KNIGHT), get_test_my_character(2, 2, 4, MAGE), get_test_my_character(3, 2, 5, RITUALIST), get_test_my_character(4, 2, 6, ARCHER)],\n        [e0, e1, e2, e3, e4], //[get_test_their_character(0, 22, 2, UNKNOWN_CLASS), get_test_their_character(1, 22, 3, UNKNOWN_CLASS), get_test_their_character(2, 22, 4, UNKNOWN_CLASS), get_test_their_character(3, 22, 5, UNKNOWN_CLASS), get_test_their_character(4, 22, 6, UNKNOWN_CLASS)],\n        [Trap { x: 255, y: 255, sprung: &mut 0, damage: 0 }; TRAPS_BUFFER_SIZE], /// TODO: using my_traps here causes exception on compile\n        [Trap { x: 255, y: 255, sprung: &mut 0, damage: 0 }; TRAPS_BUFFER_SIZE],\n    );\n\n    Game {\n        my_chars: [&mut c0, &mut c1, &mut c2, &mut c3, &mut c4],\n        their_chars: [&mut e0, &mut e1, &mut e2, &mut e3, &mut e4],\n        traps: &mut my_traps,\n        searched_traps: &mut their_traps,\n        map: map,\n        events: &mut [0; MAX_EVENTS],\n        events_count: 0,\n        won: false,\n        lost: false,\n        trap_count: my_traps_result.count,\n        searched_trap_count: their_traps_result.count,\n    }\n}\n\n#[test]\nfn test_lose() {\n    let mut game = get_test_game();\n    assert(game.lose());\n    assert(game.lost);\n    assert(!(game.won));\n    assert(!game.lose());\n    assert(!game.win());\n}\n\n#[test]\nfn test_win() {\n    let mut game = get_test_game();\n    assert(game.win());\n    assert(game.won);\n    assert(!(game.lost));\n    assert(!game.win());\n    assert(!game.lose());\n}\n\n// #[test]\n// fn test_get_update_my_char() {\n//     let mut game = get_test_game();\n//     let mut char_result = game.get_my_char(0);\n//     assert(char_result.success);\n//     let mut c0 = char_result.value;\n    \n//     let old_x = c0.get_x();\n//     let old_y = c0.get_y();\n\n//     assert(c0.set_pos(old_x + 3, old_y + 3));\n\n//     assert(game.get_my_char(0).value.get_x() == old_x + 3);\n//     assert(game.get_my_char(0).value.get_y() == old_y + 3);\n// }\n\n#[test]\nfn test_get_update_their_char() {\n    let mut game = get_test_game();\n    let mut char_result = game.get_their_char(0);\n    assert(char_result.success);\n    let mut c0 = char_result.value;\n    \n    let old_x = c0.get_x();\n    let old_y = c0.get_y();\n\n    assert(c0.set_pos(old_x + 3, old_y + 3));\n\n    assert(game.get_their_char(0).value.get_x() == old_x + 3);\n    assert(game.get_their_char(0).value.get_y() == old_y + 3);\n}\n\n#[test]\nfn test_get_traps() {\n    let mut game = get_test_game();\n    let trap_count = game.get_trap_count();\n    assert(trap_count == 0, f\"trap count: {trap_count}\");\n\n    assert(game.add_my_trap(Trap { x: 1, y: 1, sprung: &mut 0, damage: 60 }));\n    assert(game.get_trap_count() == 1);\n\n    let mut trap_result = game.get_trap(0);\n    assert(trap_result.success);\n    assert(trap_result.value.damage == 60);\n\n    for i in 1..MAX_TRAPS {\n        assert(game.add_my_trap(Trap { x: 1, y: 1, sprung: &mut 0, damage: 60 }));\n        assert(game.get_trap_count() == i + 1);\n    }\n\n    assert(!game.add_my_trap(Trap { x: 1, y: 1, sprung: &mut 0, damage: 60 }));\n}\n\n#[test]\nfn test_get_their_traps() {\n    let mut game = get_test_game();\n    let trap_count = game.get_their_trap_count();\n    assert(trap_count == 0, f\"trap count: {trap_count}\");\n\n    assert(game.add_their_trap(Trap { x: 1, y: 1, sprung: &mut 0, damage: 60 }));\n    assert(game.get_their_trap_count() == 1);\n\n    let mut trap_result = game.get_their_trap(0);\n    assert(trap_result.success);\n    assert(trap_result.value.damage == 60);\n\n    for i in 1..MAX_TRAPS {\n        assert(game.add_their_trap(Trap { x: 1, y: 1, sprung: &mut 0, damage: 60 }));\n        assert(game.get_their_trap_count() == i + 1);\n    }\n\n    assert(!game.add_their_trap(Trap { x: 1, y: 1, sprung: &mut 0, damage: 60 }));\n}\n\n#[test]\nfn test_get_tile() {\n    let mut game = get_test_game();\n    let mut tile_result = game.get_tile(0, 0);\n    assert(tile_result.success);\n    assert(tile_result.value == 0);\n\n    assert(game.set_tile(0, 0, 1));\n    let mut tile_result = game.get_tile(0, 0);\n    assert(tile_result.success);\n    assert(tile_result.value == 1);\n\n    assert(game.set_tile(WIDTH - 1 as u8, 0, 1));\n    assert(game.set_tile(0, HEIGHT - 1 as u8, 1));\n    assert(!game.set_tile(WIDTH as u8, 0, 1));\n    assert(!game.set_tile(0, HEIGHT as u8, 1));\n}\n\n#[test]\nfn test_parse_game() {\n    let crate::Result { value: mut game, success } = Game::build(\n        0x2202643f0f008203643f0f00a224643604006205643f0f004206643f0f00,\n        0x1602ff1f0f001603ff1f0f001604ff1f0f001605ff1f0f001606ff1f0f00, 0x000210020300FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 0x0000ffff00000000000000000000000000000000000000000000000000000000, [\n        [0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, ARCHER, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,               UNKNOWN_CLASS_TILE, 0, WALL, 0, 0, 0, 0, 0, 0, 0],\n        [WALL, WALL, KNIGHT,WALL, WALL, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    UNKNOWN_CLASS_TILE, 0, WALL, 0, 0, WALL, WALL, EMPTY,WALL, WALL],\n        [WALL, EMPTY,MAGE,  EMPTY,WALL, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    UNKNOWN_CLASS_TILE, 0, WALL, 0, 0, WALL, EMPTY,EMPTY,EMPTY,WALL],\n        [WALL, EMPTY,ROGUE,EMPTY,WALL, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     UNKNOWN_CLASS_TILE, 0, WALL, 0, 0, WALL, EMPTY,EMPTY,EMPTY,WALL],\n        [WALL, WALL, RITUALIST,WALL, WALL, 0, 0, EMPTY,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, UNKNOWN_CLASS_TILE, 0, EMPTY,0, 0, WALL, WALL, EMPTY,WALL, WALL],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, WATER, WATER, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WATER, WATER, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, WATER, WATER, WATER, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WATER, WATER, WATER, 0, 0, 0, 0, 0],\n    ]);\n\n    // assert(game.my_chars[0].get_class() == ARCHER);\n    // assert(game.my_chars[1].get_class() == KNIGHT);\n    // assert(game.my_chars[2].get_class() == MAGE);\n    // assert(game.my_chars[3].get_class() == ROGUE);\n    // assert(game.my_chars[4].get_class() == RITUALIST);\n\n    assert(game.their_chars[0].get_class() == UNKNOWN_CLASS);\n    assert(game.their_chars[1].get_class() == UNKNOWN_CLASS);\n    assert(game.their_chars[2].get_class() == UNKNOWN_CLASS);\n    assert(game.their_chars[3].get_class() == UNKNOWN_CLASS);\n    assert(game.their_chars[4].get_class() == UNKNOWN_CLASS);\n\n    assert(game.get_trap_count() == 2, game.get_trap_count());\n    assert(game.get_their_trap_count() == 0, game.get_their_trap_count());\n\n    // assert(game.my_chars[0].get_x() == 2);\n    // assert(game.my_chars[0].get_y() == 2);\n    // assert(game.my_chars[1].get_x() == 2);\n    // assert(game.my_chars[1].get_y() == 3);\n    // assert(game.my_chars[2].get_x() == 2);\n    // assert(game.my_chars[2].get_y() == 4);\n    // assert(game.my_chars[3].get_x() == 2);\n    // assert(game.my_chars[3].get_y() == 5);\n    // assert(game.my_chars[4].get_x() == 2);\n    // assert(game.my_chars[4].get_y() == 6);\n\n    assert(game.their_chars[0].get_x() == 22);\n    assert(game.their_chars[0].get_y() == 2);\n    assert(game.their_chars[1].get_x() == 22);\n    assert(game.their_chars[1].get_y() == 3);\n    assert(game.their_chars[2].get_x() == 22);\n    assert(game.their_chars[2].get_y() == 4);\n    assert(game.their_chars[3].get_x() == 22);\n    assert(game.their_chars[3].get_y() == 5);\n\n    // assert(game.my_chars[0].get_health() == 0x64, game.my_chars[0].get_health());\n    // assert(game.my_chars[1].get_health() == 0x64);\n    // assert(game.my_chars[2].get_health() == 0x64);\n    // assert(game.my_chars[3].get_health() == 0x64);\n    // assert(game.my_chars[4].get_health() == 0x64);\n\n    assert(game.their_chars[0].get_health() == 0xff);\n    assert(game.their_chars[1].get_health() == 0xff);\n    assert(game.their_chars[2].get_health() == 0xff);\n    assert(game.their_chars[3].get_health() == 0xff);\n    assert(game.their_chars[4].get_health() == 0xff);\n\n    // assert(game.my_chars[0].get_energy_per_move() == 0x03);\n    // assert(game.my_chars[1].get_energy_per_move() == 0x04);\n    // assert(game.my_chars[2].get_energy_per_move() == 0x04);\n    // assert(game.my_chars[3].get_energy_per_move() == 0x03);\n    // assert(game.my_chars[4].get_energy_per_move() == 0x04);\n\n    // assert(game.their_chars[0].get_energy_per_move() == 0x03);\n    // assert(game.their_chars[1].get_energy_per_move() == 0x03);\n    // assert(game.their_chars[2].get_energy_per_move() == 0x03);\n    // assert(game.their_chars[3].get_energy_per_move() == 0x03);\n    // assert(game.their_chars[4].get_energy_per_move() == 0x03);\n\n    // assert(game.my_chars[0].get_id() == 0);\n    // assert(game.my_chars[1].get_id() == 1);\n    // assert(game.my_chars[2].get_id() == 2);\n    // assert(game.my_chars[3].get_id() == 3);\n    // assert(game.my_chars[4].get_id() == 4);\n\n    // assert(game.their_chars[0].get_id() == 0);\n    // assert(game.their_chars[1].get_id() == 1);\n    // assert(game.their_chars[2].get_id() == 2);\n    // assert(game.their_chars[3].get_id() == 3);\n    // assert(game.their_chars[4].get_id() == 4);\n\n    // assert(game.my_chars[0].get_target_x() == 31, game.my_chars[0].get_target_x());\n    // assert(game.my_chars[0].get_target_y() == 15, game.my_chars[0].get_target_y());\n    // assert(game.my_chars[1].get_target_x() == 31, game.my_chars[1].get_target_x());\n    // assert(game.my_chars[1].get_target_y() == 15, game.my_chars[1].get_target_y());\n    // assert(game.my_chars[2].get_target_x() == 22, game.my_chars[2].get_target_x());\n    // assert(game.my_chars[2].get_target_y() ==  4, game.my_chars[2].get_target_y());\n    // assert(game.my_chars[3].get_target_x() == 31, game.my_chars[3].get_target_x());\n    // assert(game.my_chars[3].get_target_y() == 15, game.my_chars[3].get_target_y());\n    // assert(game.my_chars[4].get_target_x() == 31, game.my_chars[4].get_target_x());\n    // assert(game.my_chars[4].get_target_y() == 15, game.my_chars[4].get_target_y());\n\n    // // assert(game.their_chars[0].get_target_x() == 0xff);\n    // // assert(game.their_chars[0].get_target_y() == 0xff);\n    // // assert(game.their_chars[1].get_target_x() == 0xff);\n    // // assert(game.their_chars[1].get_target_y() == 0xff);\n    // // assert(game.their_chars[2].get_target_x() == 0xff);\n    // // assert(game.their_chars[2].get_target_y() == 0xff);\n    // // assert(game.their_chars[3].get_target_x() == 0xff);\n    // // assert(game.their_chars[3].get_target_y() == 0xff);\n    // // assert(game.their_chars[4].get_target_x() == 0xff);\n    // // assert(game.their_chars[4].get_target_y() == 0xff);\n\n    // assert(game.my_chars[0].get_status() == 0);\n    // assert(game.my_chars[1].get_status() == 0);\n    // assert(game.my_chars[2].get_status() == 2);\n    // assert(game.my_chars[3].get_status() == 0);\n    // assert(game.my_chars[4].get_status() == 0);\n\n    assert(game.their_chars[0].get_status() == 0);\n    assert(game.their_chars[1].get_status() == 0);\n    assert(game.their_chars[2].get_status() == 0);\n    assert(game.their_chars[3].get_status() == 0);\n    assert(game.their_chars[4].get_status() == 0);\n\n\n    assert(game.get_tile(0, 0).value == 0);\n    assert(game.get_tile(0, 1).value == 0);\n    assert(game.get_tile(0, 2).value == 0);\n    assert(game.get_tile(0, 3).value == WALL);\n    assert(game.get_tile(0, 4).value == WALL);\n    assert(game.get_tile(0, 5).value == WALL);\n    assert(game.get_tile(0, 6).value == WALL);\n    assert(game.get_tile(0, 7).value == 0);\n    assert(game.get_tile(0, 8).value == 0);\n    assert(game.get_tile(0, 9).value == 0);\n    assert(game.get_tile(1, 0).value == 0);\n    assert(game.get_tile(1, 1).value == 0);\n    assert(game.get_tile(1, 2).value == 0);\n    assert(game.get_tile(1, 3).value == WALL);\n    assert(game.get_tile(1, 4).value == EMPTY);\n    assert(game.get_tile(1, 5).value == EMPTY);\n    assert(game.get_tile(1, 6).value == WALL);\n    assert(game.get_tile(1, 7).value == 0);\n    assert(game.get_tile(1, 8).value == 0);\n    assert(game.get_tile(1, 9).value == 0);\n    assert(game.get_tile(2, 0).value == 0);\n    assert(game.get_tile(2, 1).value == 0);\n    assert(game.get_tile(2, 2).value == ARCHER);\n    assert(game.get_tile(2, 3).value == KNIGHT);\n\n\n}","path":"/home/andreas/git_repositories/noir/skirmish/src/game.nr"},"52":{"source":"use dep::std;\n\n// MAP\nglobal WIDTH = 32;\nglobal HEIGHT = 10;\n\n// CLASSES\nglobal UNKNOWN_CLASS = 0 as u8;\nglobal ARCHER = 1 as u8;\nglobal RITUALIST = 2 as u8;\nglobal ROGUE = 3 as u8;\nglobal KNIGHT = 4 as u8;\nglobal MAGE = 5 as u8;\nglobal CLASS_COUNT = 6 as u8;\n\n// ACTIONS\nglobal WAIT = 0 as u8;\nglobal SNEAK = 1 as u8;\nglobal MOVE = 2 as u8;\nglobal RITUAL = 3 as u8;\nglobal SEARCH = 4 as u8;\nglobal ATTACK = 5 as u8;\nglobal SET_TRAP = 6 as u8;\nglobal CAST_FIREBALL = 7 as u8;\nglobal DRAW = 8 as u8;\nglobal TRIGGER_TRAP = 9 as u8;\nglobal DISARM_TRAP = 10 as u8;\nglobal ACTION_COUNT = 11 as u8;\n\n// EVENTS\nglobal NO_EVENT = 0  as u8;\nglobal SEE_MOVE = 1  as u8;// actor_id = their_char when receive\nglobal SEE_RITUAL = 2  as u8; // actor_id = their_char when receive\nglobal SEE_SEARCH_TRAP = 3  as u8; // actor_id = their_char when receive\nglobal RECEIVE_ATTACK = 4  as u8; // actor_id = their_char when receive\nglobal SEE_CAST = 5 as u8; // actor_id = their_char when receive\nglobal SEE_DRAW = 6 as u8; // actor_id = their_char when receive\nglobal TRIGGERED_TRAP = 7 as u8; // actor_id = my_char when receive\nglobal WIN = 8 as u8;\nglobal FOUND_TRAP = 9 as u8; // actor_id = my_char when receive\nglobal SEE_CHARS = 10 as u8; // actor_id = their_char when receive, got health & class\nglobal RECEIVE_DAMAGE = 11 as u8; // actor_id = their_char when receive\nglobal DESTROY = 12 as u8; // actor_id = tile\nglobal DEATH = 13 as u8; // actor_id = their_char when receive\nglobal EVENT_COUNT = 14 as u8;\n\n// ATTACKS\nglobal ATTACK_MELEE = 0 as u8;\nglobal ATTACK_RANGED = 1 as u8;\nglobal ATTACK_FIREBALL = 2 as u8;\nglobal ATTACK_COUNT = 3 as u8;\n\n// TILES\nglobal EMPTY = 0 as u8;\nglobal UNKNOWN_CLASS_TILE = 6 as u8;\nglobal WALL = 7 as u8;\nglobal WATER = 8 as u8;\nglobal NON_EMPTY_WALKABLE_TILE_MIN = 9 as u8;\nglobal FLAG = 9 as u8;\nglobal TRAP = 10 as u8;\nglobal TRAP_USED = 11 as u8;\nglobal TRAP_FOUND = 12 as u8;\nglobal BODY = 13 as u8;\nglobal BODY_LOOTED = 14 as u8;\nglobal FOG = 15 as u8;\nglobal TILE_COUNT = 16 as u8;\n\n// STATUS\nglobal STATUS_COUNT = 16  as u8; // just to be more in line with the other constants, actually used as a counter\n\n// GAMEPLAY\nglobal MAX_TRAPS = 15; // note: only lowest bit of first byte of field is usable! => ! Field = 1 bit + 31 bytes!\nglobal TRAPS_BUFFER_SIZE = 16;\nglobal TRAPS_BUFFER_MASK = 15; // has to be 2^n - 1\nglobal MAX_ACTIONS = 8;\nglobal MAX_EVENTS = 8;\nglobal EVENTS_BUFFER_SIZE = 8;\nglobal EVENTS_BUFFER_MASK = 7; // has to be 2^n - 1\n\nstruct Result<T> {\n    value: T,\n    success: bool\n}\n\n////////////// CHARACTER\nmod character;\nuse character::Character;\nuse character::get_test_my_character;\nuse character::get_test_their_character;\nmod trap;\nuse trap::Trap;\nuse trap::parse_traps;\nuse trap::serialize_traps;\nmod map;\nuse map::Map;\nuse map::get_test_map;\nmod game;\nuse game::Game;\nmod event;\nuse event::Event;\nuse event::build_std_event;\nuse event::build_value_event;\nuse event::build_subtype_value_event;\nuse event::parse_event;\n\nfn move_to(map: &mut Map, actor: &mut Character, energy: &mut u8, to_x: u8, to_y: u8, exec: bool) -> Result<Field> {\n    let mut success = true;\n    if exec {\n    let can_move_to = map.can_move_to(to_x, to_y);\n    success = can_move_to.success;\n    // let success = can_move_to.success & can_move_to.value &\n    //               ((*actor).get_class() > 0) & ((*actor).get_class() < CLASS_COUNT) &\n    //               ((*actor).get_x() < WIDTH) & ((*actor).get_y() < HEIGHT) &\n    //               (to_x < WIDTH) & (to_y < HEIGHT) &\n    //               (map[(*actor).get_y()][(*actor).get_x()] == (*actor).get_class());\n    // assert(can_move_to(*map, to_x, to_y) == 1);\n    // assert((*actor).get_class() > 0);\n    // assert((*actor).get_class() < CLASS_COUNT);\n    // assert((*actor).get_x() < WIDTH);\n    // assert((*actor).get_y() < HEIGHT);\n    // assert(to_x < WIDTH);\n    // assert(to_y < HEIGHT);\n    // assert(map[(*actor).get_y()][(*actor).get_x()] == (*actor).get_class());\n    let current_tile = map.get(actor.get_x(), actor.get_y());\n    success &= current_tile.success & (current_tile.value == actor.get_class());\n\n    // assert_neighbor((*actor), to_x, to_y);\n    let is_neighbor = Map::is_neighbor(actor.get_x(), actor.get_y(), to_x, to_y);\n    success &= is_neighbor.success;\n\n    let energy_cost = actor.get_energy_per_move();\n        if energy_cost > *energy {\n            *energy = 0;\n            success = false;\n            //Result { value: 0, success: false }\n        } else {\n            *energy = *energy - energy_cost;\n        }\n    //}\n\n    let erase_result = map.set(actor.get_x(), actor.get_y(), 0); // TODO: instead of setting to 0, set to whatever it was before actor moved there!\n    let set_map_result = map.set(to_x, to_y, actor.get_class());\n    let set_char_result = actor.set_pos(to_x, to_y); //actor=>set_pos(to_x, to_y);\n    // if (!erase_result) | (!set_map_result) | (!set_char_result) {\n    //     Result { value: 0, success: false }\n    // }\n    success &= erase_result & set_map_result & set_char_result;\n    }\n    Result {\n        value: build_std_event(SEE_MOVE, actor.get_id(), to_x, to_y),\n        success: success\n    }\n}\n\n#[test]\nfn test_move_to() {\n    let mut map_result = Map::build([\n        [0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0],\n        [WALL, WALL, EMPTY,WALL, WALL, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, WALL, WALL, EMPTY,WALL, WALL],\n        [WALL, EMPTY,KNIGHT,EMPTY,WALL, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, WALL, EMPTY,EMPTY,EMPTY,WALL],\n        [WALL, EMPTY,EMPTY,EMPTY,WALL, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, WALL, EMPTY,EMPTY,EMPTY,WALL],\n        [WALL, WALL, EMPTY,WALL, WALL, 0, 0, EMPTY,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, EMPTY,0, 0, WALL, WALL, EMPTY,WALL, WALL],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, WATER, WATER, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WATER, WATER, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, WATER, WATER, WATER, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WATER, WATER, WATER, 0, 0, 0, 0, 0],\n    ]);\n    assert(map_result.success == true);\n    let mut map = map_result.value;\n    let mut class = KNIGHT;\n    let mut c = Character {\n        id: 0,\n        x: 2,\n        y: 4,\n        status: 0,\n        health: 100,\n        class: class,\n        has_been_seen: 0,\n        target_x: 0,\n        target_y: 0,\n        damage: 123,\n    };\n    let mut energy = 12;\n    let result = move_to(&mut map, &mut c, &mut energy, 2, 3, true);\n    assert(result.success == true);\n    assert(result.value == build_std_event(SEE_MOVE, 0, 2, 3));\n}\n\nfn sneak_to(map: &mut Map, actor: &mut Character, energy: &mut u8, to_x: u8, to_y: u8, exec: bool) -> bool {\n    let mut success = true;\n    if exec {\n        let can_move_to = map.can_move_to(to_x, to_y);\n        success &= can_move_to.success;\n        let current_tile = map.get(actor.get_x(), actor.get_y());\n        success &= current_tile.success & (current_tile.value == actor.get_class());\n        // assert(can_move_to(*map, to_x, to_y) == 1);\n        // assert((*actor).get_class() == ROGUE);\n        // assert(((*actor).get_x() < WIDTH) & ((*actor).get_y() < HEIGHT));\n        // assert((to_x < WIDTH) & (to_y < HEIGHT));\n        // assert(*energy >= 6);\n        \n        // assert_neighbor((*actor), to_x, to_y);\n        let is_neighbor = Map::is_neighbor(actor.get_x(), actor.get_y(), to_x, to_y);\n        success &= is_neighbor.success;\n\n        let can_sneak = actor.can_sneak();\n        success &= can_sneak;\n\n        let energy_cost = (*actor).get_energy_per_sneak();\n        if energy_cost > *energy {\n            *energy = 0;\n            success = false;\n            //Result { value: 0, success: false }\n        } else {\n            *energy = *energy - energy_cost;\n        }\n\n        let erase_result = map.set(actor.get_x(), actor.get_y(), 0); // TODO: instead of setting to 0, set to whatever it was before actor moved there!\n        let set_map_result = map.set(to_x, to_y, actor.get_class());\n        let set_char_result = actor.set_pos(to_x, to_y); //actor=>set_pos(to_x, to_y);\n        success &= erase_result & set_map_result & set_char_result;\n    }\n\n    success\n}\n\nfn get_actor_from_move(mut move: u32) -> u8 {\n    if (move % 2) == 1 {\n        move -= 1; //((move % 10) - 1) >> 1 // actually not needed ... but clearer this way\n    }\n    let single_digit: u32 = (move % 10 as u32) >> 1;\n    single_digit as u8\n}\n\nfn get_data_hash(secret: [u8], characters: [u8], their_characters: [u8], traps: [u8], map: [[u8; WIDTH]; HEIGHT], searched_traps: [u8]) -> [u8; 32] {\n    assert(secret.len() == 32);\n    assert(characters.len() == 32);\n    assert(traps.len() == 32);\n    assert(their_characters.len() == 32);\n\n    let mut data: [u8; WIDTH * HEIGHT + 32 * 5] = [0; WIDTH * HEIGHT + 32 * 5];\n    for i in 0..HEIGHT {\n        for j in 0..WIDTH {\n            assert(i < 10);\n            assert(j < WIDTH);\n            let index = (i as u64) * (WIDTH as u64) + (j as u64);\n            data[index] = map[i][j];\n        }\n    }\n    let offset = (WIDTH as u64) * (HEIGHT as u64);\n    for i in 0..32 {\n        data[offset + i] = secret[i];\n        data[offset + i + 32] = characters[i];\n        data[offset + i + 64] = traps[i];\n        data[offset + i + 96] = searched_traps[i];\n        data[offset + i + 128] = their_characters[i];\n    }\n    // let offset = WIDTH * HEIGHT + 32 * 3;\n    // for i in 0..10 {\n    //     data[offset + i * 4] = (searched_traps[i] & 255) as u8;\n    //     data[offset + i * 4 + 1] = ((searched_traps[i] >> 8) & 255) as u8;\n    //     data[offset + i * 4 + 2] = ((searched_traps[i] >> 16) & 255) as u8;\n    //     data[offset + i * 4 + 3] = ((searched_traps[i] >> 24) & 255) as u8;\n    // }\n    std::hash::blake3(data)\n}\n\n\n\n\n\n\n// #[test]\n// fn get_demo_game() {\n//     let mut c0 = get_test_my_character(0, 2, 2, ARCHER);\n//     let mut c1 = get_test_my_character(1, 2, 3, KNIGHT);\n//     let mut c2 = get_test_my_character(2, 2, 4, MAGE);\n//     let mut c3 = get_test_my_character(3, 2, 5, ROGUE);\n//     let mut c4 = get_test_my_character(4, 2, 6, RITUALIST);\n\n//     let mut e0 = get_test_their_character(0, 22, 2, UNKNOWN_CLASS);\n//     let mut e1 = get_test_their_character(1, 22, 3, UNKNOWN_CLASS);\n//     let mut e2 = get_test_their_character(2, 22, 4, UNKNOWN_CLASS);\n//     let mut e3 = get_test_their_character(3, 22, 5, UNKNOWN_CLASS);\n//     let mut e4 = get_test_their_character(4, 22, 6, UNKNOWN_CLASS);\n\n//     *c2.status = 2;\n\n//     // let my_traps = [0; 32];\n//     // let their_traps = [0; 32];\n//     let mut my_traps_result = parse_traps(0x0000ffff00000000000000000000000000000000000000000000000000000000);\n//     let mut my_traps = my_traps_result.value;\n//     let mut their_traps_result = parse_traps(0x0000ffff00000000000000000000000000000000000000000000000000000000);\n//     let mut their_traps = their_traps_result.value;\n//     //let mut map = get_test_map([c0, c1, c2, c3, c4], [e0, e1, e2, e3, e4], my_traps, their_traps);\n\n//     let mut map = get_test_map(\n//         [c0, c1, c2, c3, c4], //[get_test_my_character(0, 2, 2, ROGUE), get_test_my_character(1, 2, 3, KNIGHT), get_test_my_character(2, 2, 4, MAGE), get_test_my_character(3, 2, 5, RITUALIST), get_test_my_character(4, 2, 6, ARCHER)],\n//         [e0, e1, e2, e3, e4], //[get_test_their_character(0, 22, 2, UNKNOWN_CLASS), get_test_their_character(1, 22, 3, UNKNOWN_CLASS), get_test_their_character(2, 22, 4, UNKNOWN_CLASS), get_test_their_character(3, 22, 5, UNKNOWN_CLASS), get_test_their_character(4, 22, 6, UNKNOWN_CLASS)],\n//         [Trap { x: 255, y: 255, sprung: &mut 0, damage: 0 }; TRAPS_BUFFER_SIZE], /// TODO: using my_traps here causes exception on compile\n//         [Trap { x: 255, y: 255, sprung: &mut 0, damage: 0 }; TRAPS_BUFFER_SIZE],\n//     );\n\n//     let game = Game {\n//         my_chars: [&mut c0, &mut c1, &mut c2, &mut c3, &mut c4],\n//         their_chars: [&mut e0, &mut e1, &mut e2, &mut e3, &mut e4],\n//         traps: &mut my_traps,\n//         searched_traps: &mut their_traps,\n//         map: map,\n//         events: &mut [0; MAX_EVENTS],\n//         events_count: &mut 0,\n//         won: &mut false,\n//         lost: &mut false,\n//         trap_count: &mut my_traps_result.count,\n//         searched_trap_count: &mut their_traps_result.count,\n//     };\n\n//     let map_after = [\n//         game.map._data[0].map(|cell| *cell),\n//         game.map._data[1].map(|cell| *cell),\n//         game.map._data[2].map(|cell| *cell),\n//         game.map._data[3].map(|cell| *cell),\n//         game.map._data[4].map(|cell| *cell),\n//         game.map._data[5].map(|cell| *cell),\n//         game.map._data[6].map(|cell| *cell),\n//         game.map._data[7].map(|cell| *cell),\n//         game.map._data[8].map(|cell| *cell),\n//         game.map._data[9].map(|cell| *cell),\n//     ];\n//     assert(map_after.len() == 10);\n//     for i in 0..10 {\n//         assert(map_after[i].len() == 32);\n//     }\n//     let my_chars_after = game.serialize_my_chars();\n//     assert(my_chars_after.success);\n//     let their_chars_after = game.serialize_their_chars();\n//     assert(their_chars_after.success);\n//     let traps_after = serialize_traps(game.get_trap_count() as u8, *game.traps);\n//     let searched_traps_after = serialize_traps(game.get_their_trap_count() as u8, *game.searched_traps);\n\n//     let my_chars = my_chars_after.value;\n//     let their_chars = their_chars_after.value;\n\n//     assert(map_after[2][22] == UNKNOWN_CLASS_TILE);\n\n//     let secret: Field = 1234567890;\n//     let new_hash_array = get_data_hash(secret.to_be_bytes(32), my_chars_after.value.to_be_bytes(32), their_chars.to_be_bytes(32), traps_after.to_be_bytes(32), [\n//         [0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0],\n//         [0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0],\n//         [0, 0, ARCHER, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, UNKNOWN_CLASS_TILE, 0, WALL, 0, 0, 0, 0, 0, 0, 0],\n//         [WALL, WALL, KNIGHT,WALL, WALL, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    UNKNOWN_CLASS_TILE, 0, WALL, 0, 0, WALL, WALL, EMPTY,WALL, WALL],\n//         [WALL, EMPTY,MAGE,  EMPTY,WALL, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    UNKNOWN_CLASS_TILE, 0, WALL, 0, 0, WALL, EMPTY,EMPTY,EMPTY,WALL],\n//         [WALL, EMPTY,ROGUE,EMPTY,WALL, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     UNKNOWN_CLASS_TILE, 0, WALL, 0, 0, WALL, EMPTY,EMPTY,EMPTY,WALL],\n//         [WALL, WALL, RITUALIST,WALL, WALL, 0, 0, EMPTY,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, UNKNOWN_CLASS_TILE, 0, EMPTY,0, 0, WALL, WALL, EMPTY,WALL, WALL],\n//         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n//         [0, 0, 0, 0, 0, 0, WATER, WATER, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WATER, WATER, 0, 0, 0, 0, 0, 0],\n//         [0, 0, 0, 0, 0, WATER, WATER, WATER, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WATER, WATER, WATER, 0, 0, 0, 0, 0],\n//     ], searched_traps_after.to_be_bytes(32));\n//     let new_hash = std::field::bytes32_to_field(new_hash_array);\n\n//     assert(new_hash == 0x0716ac88cc4d1abab6ed2c00278573908bc1b360c955eab19e5822c1d107cdcc, f\"hash: {new_hash}, secret: {secret}, my_chars: {my_chars}, their_chars: {their_chars}, traps: {traps_after}, searched_traps: {searched_traps_after}\");\n// }\n\n\n\nstruct Test {\n    a: u8,\n    b: u8,\n}\n\nimpl Test {\n    fn set_a(&mut self, a: u8) {\n        self.a = a;\n    }\n    fn set_b(&mut self, b: u8) {\n        self.b = b;\n    }\n    fn new(a: u8, b: u8) -> Test {\n        Test { a: a, b: b }\n    }\n}\n\nfn t(t: &mut Test, a: pub u8, b: pub u8) {\n    //let t = Test { a: &mut orig_a, b: &mut orig_b };\n\n    t.set_a(a);\n    t.set_b(b);\n\n    assert(t.a == a);\n    assert(t.b == b);\n}\n\nfn main(\n    secret: Field,\n    my_characters: Field,\n    their_characters: Field,\n    actions: [Field; 5],\n    traps: Field,\n    searched_traps: Field, // [u32; HEIGHT],\n    move: pub u32,\n    map_old: [[u8; WIDTH]; HEIGHT],\n    map_new: [[u8; WIDTH]; HEIGHT],\n    received_events: pub [Field; MAX_EVENTS],\n    sending_events: pub [Field; MAX_EVENTS],\n    gamestate_before_hash: pub Field,\n    gamestate_after_hash: pub Field\n) {\n    let old_hash = get_data_hash(secret.to_be_bytes(32), my_characters.to_be_bytes(32), their_characters.to_be_bytes(32), traps.to_be_bytes(32), map_old, searched_traps.to_be_bytes(32));\n    // let old_gamestate_bytes = gamestate_before_hash.to_be_bytes(32);\n    let argh = std::field::bytes32_to_field(old_hash);\n    // assert(old_gamestate_bytes.len() == 32);\n    // for i in 0..32 {\n    //     assert(old_hash[i] == old_gamestate_bytes[i], f\"{argh} != {gamestate_before_hash}\");\n    // }\n    assert(argh == gamestate_before_hash, f\"{argh} != {gamestate_before_hash}\");\n\n    let actor_id = get_actor_from_move(move);\n    assert(actor_id < 5);\n\n    let Result { value: mut game, success: parse_game_success } = Game::build(my_characters, their_characters, traps, searched_traps, map_old);\n    assert(parse_game_success);\n\n    assert(game.won == false);\n    assert(game.lost == false);\n    //assert(game.my_chars[2].get_status() == 2);\n//     // println(game.my_chars[2].get_status());\n\n    for i in 0..MAX_EVENTS {\n        let event = parse_event(received_events[i]);\n        assert(event.process(&mut game));\n    }\n//     //println(game.my_chars[2].get_status());\n\n//     //let mut actor = &mut game.my_chars[actor_id];\n//     // let class = actor.get_class();\n//     // let id = actor.get_id();\n//     // assert(1 == 2,f\"{id} {class}\");\n//     // assert(actor_result.success);\n//     // let mut actor = actor_result.value;\n//     let mut game_events = game.events.map(|event| event);\n//     let mut energy: u8 = 12;\n\n//     //let actor = &mut game.my_chars[actor_id];\n\n\n//     for j in 0..5 {\n//         let split = actions[j].to_be_bytes(32);\n//         let action = split[1];\n//         assert(action < ACTION_COUNT);\n\n//         let current_actor_id = split[2];\n\n//         let current_arg_1 = split[3];\n//         let current_arg_2 = split[4];\n\n//         if (action != WAIT) {\n//             assert(actor_id == current_actor_id, f\"{actor_id} != {current_actor_id}\");\n//             assert(current_actor_id == game.my_chars[current_actor_id].id, game.my_chars[current_actor_id].id);\n//         }\n\n//         let current_class = game.my_chars[current_actor_id].get_class();\n//         println(f\"Current Actor: {current_actor_id} {current_class} {current_arg_1} {current_arg_2} {action}\");\n\n//         let move_to_result = move_to(game.map, game.my_chars[actor_id], &mut energy, split[3], split[4], action == MOVE);\n//         let sneak_result = sneak_to(game.map, game.my_chars[actor_id], &mut energy, split[3], split[4], action == SNEAK);\n//         let mut ec = game.events_count;\n//         // let mut tc = game.trap_count;\n//         let new_trap = Trap { x: split[3], y: split[4], sprung: &mut 0, damage: 64 };\n//             //assert(game.my_chars[actor_id].get_class() == MAGE, game.my_chars[actor_id].get_class());\n//         if action == SNEAK {\n//             println(f\"Sneak\");\n//             // hide: y|x|actor|0\n//             //assert(split[2] == actor_id); // for the most parts, only current actor may do stuff\n//             assert(sneak_result);\n//             // assert(game.add_event(sneak_result.value));\n//             assert(game.my_chars[actor_id].set_status(0));\n//         }\n//         else if action == MOVE {\n//             println(f\"Move to {split[3]} {split[4]}\");\n//             // movey|x|actor|0\n//             //assert(split[2] == actor_id);// for the most parts, only current actor may do stuff\n//             //action_event_result = move_to(game.map, actor, &mut energy, split[3], split[4]);\n//             assert(move_to_result.success);\n//             assert(game.add_event(move_to_result.value));\n//         // game_events[ec & EVENTS_BUFFER_MASK] = move_to_result.value;\n//         // assert(ec < MAX_EVENTS);\n//         // ec += 1;\n//         // *game.events_count = ec;\n//             assert(game.my_chars[actor_id].set_status(0));\n//         }\n//         else if action == RITUAL {\n//             println(f\"Ritual\");\n//             //assert(split[2] == game.my_chars[actor_id].id); // for the most parts, only current actor may do stuff\n//             assert(game.my_chars[actor_id].get_class() == RITUALIST);\n//             assert(energy == 12);\n//             energy = 0;\n//             if game.my_chars[actor_id].get_status() < 7 {\n//                 (*game.my_chars[actor_id]).status += 1;\n//         // game_events[ec & EVENTS_BUFFER_MASK] = build_std_event(RITUAL, game.my_chars[actor_id].id, game.my_chars[actor_id].get_x(), game.my_chars[actor_id].get_y());\n//         // assert(ec < MAX_EVENTS);\n//         // ec += 1;\n//         // *game.events_count = ec;\n//                 assert(game.add_event(build_std_event(RITUAL, game.my_chars[actor_id].id, game.my_chars[actor_id].get_x(), game.my_chars[actor_id].get_y())));\n//             } else {\n//         // game_events[ec & EVENTS_BUFFER_MASK] = build_std_event(WIN, game.my_chars[actor_id].id, game.my_chars[actor_id].get_x(), game.my_chars[actor_id].get_y());\n//         // assert(ec < MAX_EVENTS);\n//         // ec += 1;\n//         // *game.events_count = ec;\n//                 assert(game.add_event(build_std_event(WIN, game.my_chars[actor_id].id, game.my_chars[actor_id].get_x(), game.my_chars[actor_id].get_y())));\n//             }\n//             assert(game.my_chars[actor_id].set_status(0));\n//         }\n//         else if action == SEARCH {\n//             println(\"Search\");\n//             //assert(split[2] == game.my_chars[actor_id].id);\n//             assert(game.my_chars[actor_id].get_class() == ROGUE);\n//             let x = split[3];\n//             let y = split[4];\n//             assert(x < WIDTH);\n//             assert(y < HEIGHT);\n//             assert(energy >= 6);\n//             let is_neighbor_result = Map::is_neighbor(game.my_chars[actor_id].get_x(), game.my_chars[actor_id].get_y(), x, y);\n//             assert(is_neighbor_result.success);\n//             assert(is_neighbor_result.value);\n//             // assert(((x == actor.x) & ((y == actor.y + 1) | (y == actor.y - 1))) | ((y == actor.x) & ((x == actor.x + 1) | (x == actor.x - 1))));\n//             // assert(game.add_event(build_std_event(NO_EVENT, 0, 0, 0)));\n//             energy -= 6;\n//             assert(game.my_chars[actor_id].set_status(0));\n//         }\n//         else if action == CAST_FIREBALL {\n//             println(\"Cast Fireball\");\n//            // assert(split[2] == game.my_chars[actor_id].id);// for the most parts, only current actor may do stuff\n//             assert((*game.my_chars[actor_id]).get_class() == MAGE, game.my_chars[actor_id].class);\n//             //assert(current_class == MAGE);\n//             assert(energy == 12);\n//             // TODO: Validate split = target!\n//             energy = 0;\n//             // assert(game.my_chars[actor_id].get_status() == 2);\n//             if game.my_chars[actor_id].get_status() == 0 {\n//                 //println(\"start cast\");\n//                 assert(game.my_chars[actor_id].set_target(split[3], split[4]));\n//             } else {\n//                 // println(\"continue cast\");\n//                 // println(game.my_chars[actor_id].get_target_x());\n//                 println(game.my_chars[actor_id].get_target_y());\n//                 // println(split[3]);\n//                 println(split[4]);\n//                 assert(game.my_chars[actor_id].get_target_x() == split[3]);\n//                 assert(game.my_chars[actor_id].get_target_y() == split[4]);\n//             }\n\n//                 // println(actor_id);\n//                 // println(game.my_chars[actor_id].get_status());\n//             if game.my_chars[actor_id].get_status() < 2 {\n//                 (*game.my_chars[actor_id]).status += 1;\n//         // game_events[ec & EVENTS_BUFFER_MASK] = build_std_event(SEE_CAST, game.my_chars[actor_id].id, game.my_chars[actor_id].get_x(), game.my_chars[actor_id].get_y());\n//         // assert(ec < MAX_EVENTS);\n//         // ec += 1;\n//         // *game.events_count = ec;\n//                 assert(game.add_event(build_std_event(SEE_CAST, game.my_chars[actor_id].id, game.my_chars[actor_id].get_x(), game.my_chars[actor_id].get_y())));\n//             } else {\n//         game_events[ec & EVENTS_BUFFER_MASK] = build_subtype_value_event(RECEIVE_ATTACK, actor_id, split[3], split[4], 48, ATTACK_FIREBALL);\n//         // assert(ec == 0);\n//         // assert(game_events[0] ==0);\n//             assert(game_events[0] != 0);\n//         // assert(ec < MAX_EVENTS);\n//         // ec += 1;\n//         // *game.events_count = ec;\n//                 assert(game.add_event(build_subtype_value_event(RECEIVE_ATTACK, actor_id, game.my_chars[actor_id].get_x(), game.my_chars[actor_id].get_y(), 48, ATTACK_FIREBALL)));\n//             }\n//         }\n//         else if action == SET_TRAP {\n//             println(\"Set Trap\");\n//             //assert(split[2] == game.my_chars[actor_id].id);\n//             assert(game.my_chars[actor_id].set_status(0));\n//             assert(game.add_my_trap(new_trap)); // TODO: add more trap types ... for now all do 64 damage\n\n//             assert(MAX_TRAPS <= TRAPS_BUFFER_SIZE);\n//             // game.traps[tc & TRAPS_BUFFER_MASK] = new_trap;/////////TODO: no idea how to make compiler accept this\n//             // tc += 1;\n//             // *game.trap_count = tc;\n            \n//             //let mut tile = TRAP;\n//             // assert(tc < MAX_TRAPS & game.map.set(new_trap.x, new_trap.y, tile));\n//             // if my_traps.len() >= 10 {\n//             //     let (_popped, rest) = my_traps.pop_front();\n//             //     my_traps = rest.push_back(Trap { x: split[3], y: split[4]});\n//             // }\n//         }\n//         else if action == ATTACK {\n//             println(\"Attack\");\n//             //assert(split[2] == game.my_chars[actor_id].id);\n//             if game.my_chars[actor_id].get_class() == ARCHER {\n//                 assert(game.my_chars[actor_id].get_status() == 1);\n//                 assert(game.add_event(build_subtype_value_event(RECEIVE_ATTACK, actor_id, split[3], split[4], game.my_chars[actor_id].damage, ATTACK_RANGED)));\n//         // game_events[ec & EVENTS_BUFFER_MASK] = build_subtype_value_event(RECEIVE_ATTACK, actor_id, split[3], split[4], game.my_chars[actor_id].damage, ATTACK_RANGED);\n//         // assert(ec < MAX_EVENTS);\n//         // ec += 1;\n//         // *game.events_count = ec;\n//             } else {\n//                 let is_neighbor_result = Map::is_neighbor(game.my_chars[actor_id].get_x(), game.my_chars[actor_id].get_y(), split[3], split[4]);\n//                 assert(is_neighbor_result.success);\n//                 assert(is_neighbor_result.value);\n//                 // assert_neighbor(actor, split[3], split[4]);\n\n//                 assert(game.add_event(build_subtype_value_event(RECEIVE_ATTACK, actor_id, split[3], split[4], game.my_chars[actor_id].damage, ATTACK_MELEE)));\n//         // game_events[ec & EVENTS_BUFFER_MASK] = build_subtype_value_event(RECEIVE_ATTACK, actor_id, split[3], split[4], game.my_chars[actor_id].damage, ATTACK_MELEE);\n//         // assert(ec < MAX_EVENTS);\n//         // ec += 1;\n//         // *game.events_count = ec;\n//                 // let tile_result = game.get_tile(split[3], split[4]);\n//                 // assert(tile_result.success);\n//                 // if (actor.get_class() == KNIGHT) & (tile_result.value == WALL) {\n//                 //     assert(game.set_tile(split[3], split[4], EMPTY));\n//                 // }\n//             }\n//             assert(game.my_chars[actor_id].set_status(0));\n//         }\n//     //     else if action == DRAW {\n//     //         assert(split[2] == actor.id);\n//     //         assert(actor.get_class() == ARCHER);\n//     //         assert(actor.set_status(1));\n//     //         assert(game.add_event(build_std_event(SEE_DRAW, actor.id, split[3], split[4])));\n//     //     }\n//     //     // else if action == TRIGGER_TRAP {\n//     //     //     let target = split[2];\n//     //     //     assert(game.add_event(build_value_event(TRIGGERED_TRAP, target, split[3], split[4]));\n//     //     //     i += 1;\n//     //     // }\n//     //     else if action == WAIT {\n//     //         // assert(game.add_event(build_event(NO_EVENT, split[2], 255, 255));\n//     //         assert(actor.set_status(0));\n//     //     }\n//     //     else {\n//     //         assert(1 == 2); // basically, invalid action code\n//     //     }\n//     }\n\n// //     for i in 0..MAX_EVENTS {\n// //         let v0 = sending_events[i];\n// //         let v1 = game_events[i];\n// //         assert(sending_events[i] == game_events[i], f\"{i}: {v0} != {v1}\");\n// //     }\n\n// //     for i in 0..HEIGHT {\n// //         for j in 0..WIDTH {\n// //             let tile_result = game.map.get(j, i);\n// //             assert(tile_result.success);\n// //             assert(map_new[i][j] == tile_result.value);\n// //         }\n// //     }\n// //     // if their_char[0].health + their_char[1].health + their_char[2].health + their_char[3].health + their_char[4].health == 0 {\n// //     //     // won0x04021604300200000000000000000000000000000000000000000000000000\n// //     // }         0x04020216300200000000000000000000000000000000000000000000000000\n// //     let map_after = [\n// //         game.map._data[0].map(|cell| *cell),\n// //         game.map._data[1].map(|cell| *cell),\n// //         game.map._data[2].map(|cell| *cell),\n// //         game.map._data[3].map(|cell| *cell),\n// //         game.map._data[4].map(|cell| *cell),\n// //         game.map._data[5].map(|cell| *cell),\n// //         game.map._data[6].map(|cell| *cell),\n// //         game.map._data[7].map(|cell| *cell),\n// //         game.map._data[8].map(|cell| *cell),\n// //         game.map._data[9].map(|cell| *cell),\n// //     ];\n// //     let my_chars_after = game.serialize_my_chars();\n// //     assert(my_chars_after.success);\n// //     let their_chars_after = game.serialize_their_chars();\n// //     assert(their_chars_after.success);\n// //     let traps_after = serialize_traps(game.get_trap_count() as u8, *game.traps);\n// //     let searched_traps_after = serialize_traps(game.get_their_trap_count() as u8, *game.searched_traps);\n\n// //     let new_hash_bytes = get_data_hash(secret.to_be_bytes(32), my_chars_after.value.to_be_bytes(32), their_chars_after.value.to_be_bytes(32), traps_after.to_be_bytes(32), map_after, searched_traps_after.to_be_bytes(32));\n// //     let new_hash = std::field::bytes32_to_field(new_hash_bytes);\n// //     assert(new_hash == gamestate_after_hash, f\"{new_hash} != {gamestate_after_hash}\");\n// //     // let new_gamestate_bytes = gamestate_after_hash.to_be_bytes(32);\n// //     // assert(new_gamestate_bytes.len() == 32);\n// //     // for i in 0..32 {\n// //     //     assert(new_hash[i] == new_gamestate_bytes[i]);\n// //     // }\n// // }\n\n        let ts: [&mut Test; 2] = [ &mut Test::new(map_new[0][0], map_new[0][1]), &mut Test::new(map_new[1][0], map_new[1][1]) ];\n        t(ts[0], map_new[3][3], map_new[2][2]);\n        assert(ts[0].a == map_new[3][3]);\n}\n\n#[test]\nfn test_main() {\n    main(\n        1234567890,\n        0x2202643f0f008203643f0f00a224643604006205643f0f004206643f0f00,\n        0x1602ff1f0f001603ff1f0f001604ff1f0f001605ff1f0f001606ff1f0f00,\n        [ std::field::bytes32_to_field([0, CAST_FIREBALL, 2, 22, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 0, 0, 0, 0],\n        0x000210020300FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,\n        0x000210020300FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,\n        4,\n        [\n        [0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, ARCHER, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,               UNKNOWN_CLASS_TILE, 0, WALL, 0, 0, 0, 0, 0, 0, 0],\n        [WALL, WALL, KNIGHT,WALL, WALL, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    UNKNOWN_CLASS_TILE, 0, WALL, 0, 0, WALL, WALL, EMPTY,WALL, WALL],\n        [WALL, EMPTY,MAGE,  EMPTY,WALL, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    UNKNOWN_CLASS_TILE, 0, WALL, 0, 0, WALL, EMPTY,EMPTY,EMPTY,WALL],\n        [WALL, EMPTY,ROGUE,EMPTY,WALL, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     UNKNOWN_CLASS_TILE, 0, WALL, 0, 0, WALL, EMPTY,EMPTY,EMPTY,WALL],\n        [WALL, WALL, RITUALIST,WALL, WALL, 0, 0, EMPTY,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, UNKNOWN_CLASS_TILE, 0, EMPTY,0, 0, WALL, WALL, EMPTY,WALL, WALL],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, WATER, WATER, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WATER, WATER, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, WATER, WATER, WATER, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WATER, WATER, WATER, 0, 0, 0, 0, 0],\n    ],\n        [\n        [0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, ARCHER, 0, 0, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, UNKNOWN_CLASS_TILE, 0, WALL, 0, 0, 0, 0, 0, 0, 0],\n        [WALL, WALL, KNIGHT,WALL, WALL, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    UNKNOWN_CLASS_TILE, 0, WALL, 0, 0, WALL, WALL, EMPTY,WALL, WALL],\n        [WALL, EMPTY,MAGE,  EMPTY,WALL, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    UNKNOWN_CLASS_TILE, 0, WALL, 0, 0, WALL, EMPTY,EMPTY,EMPTY,WALL],\n        [WALL, EMPTY,ROGUE,EMPTY,WALL, 0, 0, WALL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     UNKNOWN_CLASS_TILE, 0, WALL, 0, 0, WALL, EMPTY,EMPTY,EMPTY,WALL],\n        [WALL, WALL, RITUALIST,WALL, WALL, 0, 0, EMPTY,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, UNKNOWN_CLASS_TILE, 0, EMPTY,0, 0, WALL, WALL, EMPTY,WALL, WALL],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, WATER, WATER, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WATER, WATER, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, WATER, WATER, WATER, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, WATER, WATER, WATER, 0, 0, 0, 0, 0],\n    ],\n        [0; MAX_EVENTS],\n        [build_subtype_value_event(RECEIVE_ATTACK, 2, 22, 4, 48, ATTACK_FIREBALL), 0, 0, 0, 0, 0, 0, 0],\n        0x26006810f066d34cdabf83fa4c697c6e30f252b866758499ac06a7955b4c234b, //0x0716ac88cc4d1abab6ed2c00278573908bc1b360c955eab19e5822c1d107cdcc,\n        0x0a824dd1c049066a192d49045e50814708070119ff93e13bb3805b1074ccaff6\n    )\n}","path":"/home/andreas/git_repositories/noir/skirmish/src/main.nr"},"55":{"source":"use dep::std;\nuse crate::KNIGHT;\nuse crate::MAGE;\nuse crate::RITUALIST;\nuse crate::ROGUE;\nuse crate::WIDTH;\nuse crate::HEIGHT;\nuse crate::CLASS_COUNT;\nuse crate::STATUS_COUNT;\n\nglobal class_damage = [\n    0, // UNKNOWN_CLASS\n    32, //ARCHER\n    8, // RITUALIST\n    24, // ROGUE\n    40, // KNIGHT\n    16, // MAGE\n];\n\nstruct Coordinates {\n    x: u8,\n    y: u8,\n}\n\nstruct Character {\n    id: u8,\n    // pos: Coordinates,\n    // target: Coordinates,\n    x: u8, // 5 bit\n    y: u8, // 4 bit\n    class: u8, // 3 bit\n    status: u8, // 0 = idle, 1-15 = continuing action => 4 bit\n    health: u8,\n    has_been_seen: u1,\n    target_x: u8,\n    target_y: u8,\n    damage: u8,\n}\n\nimpl Character {\n    pub fn get_id(self) -> u8 {\n        self.id\n    }\n\n    pub fn get_x(self) -> u8 {\n        self.x\n    }\n\n    pub fn get_y(self) -> u8 {\n        self.y\n    }\n\n    pub fn get_class(self) -> u8 {\n        self.class\n    }\n\n    pub fn get_status(self) -> u8 {\n        self.status\n    }\n\n    pub fn get_health(self) -> u8 {\n        self.health\n    }\n\n    pub fn get_has_been_seen(self) -> u1 {\n        self.has_been_seen\n    }\n\n    pub fn get_target_x(self) -> u8 {\n        self.target_x\n    }\n\n    pub fn get_target_y(self) -> u8 {\n        self.target_y\n    }\n\n    pub fn get_energy_per_move(self) -> u8 {\n        if (self.class == KNIGHT) | (self.class == MAGE) | (self.class == RITUALIST) {\n            4\n        } else {\n            3\n        }\n    }\n\n    pub fn can_sneak(self) -> bool {\n        self.class == ROGUE\n    }\n\n    pub fn get_energy_per_sneak(self) -> u8 {\n        if self.can_sneak() {\n            6\n        } else {\n            255\n        }\n    }\n\n    pub fn set_pos(&mut self, x: u8, y: u8) -> bool {\n        let success = ((x < WIDTH) & (y < HEIGHT)) | ((x == 255) | (y == 255));\n        if success {\n            (*self).x = x;\n            (*self).y = y;\n        }\n        success\n    }\n\n    pub fn set_class(&mut self, class: u8) -> bool {\n        let success = (class < crate::CLASS_COUNT) & ((self.class == crate::UNKNOWN_CLASS) | (self.class == class));\n        if success {\n            (*self).class = class;\n        }\n        success\n    }\n\n    pub fn set_status(&mut self, status: u8) -> bool {\n        let success = (status < crate::STATUS_COUNT) & ((self.status == 0) | (status == 0) | (self.status + 1 == status));\n        if success {\n            (*self).status = status;\n        }\n        success\n    }\n\n    pub fn set_health(&mut self, health: u8) -> bool {\n        (*self).health = health;\n        true\n    }\n\n    pub fn set_has_been_seen(&mut self, has_been_seen: u1) -> bool {\n        let success = (self.has_been_seen == has_been_seen) | (self.has_been_seen == 0);\n        if success {\n            (*self).has_been_seen = has_been_seen;\n        }\n        success\n    }\n\n    pub fn set_target(&mut self, target_x: u8, target_y: u8) -> bool {\n        let success = ((target_x < WIDTH) & (target_y < HEIGHT)) | ((target_x == 255) & (target_y == 255));\n        if success {\n            (*self).target_x = target_x;\n            (*self).target_y = target_y;\n        }\n        success\n    }\n\n    pub fn is_valid(self) -> bool {\n        ((self.x < WIDTH) & (self.y < HEIGHT)) | ((self.x == 255) & (self.y == 255)) &\n        ((self.class < CLASS_COUNT) & (self.status < STATUS_COUNT)) &\n        ((self.target_x < WIDTH) & (self.target_y < HEIGHT)) | ((self.target_x == 255) & (self.target_y == 255))\n    }\n\n    pub fn has_known_pos(self) -> u8 {\n        if (self.x != 255) & (self.y != 255) {\n            1\n        } else {\n            0\n        }\n    }\n\n    pub fn has_known_target(self) -> u8 {\n        if (self.target_x != 255) & (self.target_y != 255) {\n            1\n        } else {\n            0\n        }\n    }\n\n    pub fn serialize(self) -> crate::Result<[u8; 6]> {\n        let is_valid = self.is_valid();\n        let has_known_pos = self.has_known_pos();\n        let has_known_target = self.has_known_target();\n        let packed_x = self.x | (self.class << 5);\n        let packed_y = self.y | (self.status << 4);\n        let packed_target_x = (self.target_x & 31) | (has_known_pos << 5) | (has_known_target << 6);\n        let packed_target_y = self.target_y & 15;\n        crate::Result {\n            value: [packed_x, packed_y, self.health, packed_target_x, packed_target_y, 0],\n            success: is_valid\n        }\n    }\n\n    pub fn create_character(id: u8, x: u8, y: u8, class: u8) -> crate::Result<Character> {\n        // let mut xx = x;\n        // let mut yy = y;\n        // let mut cc = class;\n        let c = Character {\n            id: id,\n            x: x,\n            y: y,\n            class: class,\n            status: 0,\n            health: 0,\n            has_been_seen: 0,\n            target_x: 255,\n            target_y: 255,\n            damage: class_damage[class],\n        };\n        crate::Result {\n            value: c,\n            success: c.is_valid()\n        }\n    }\n\n    pub fn parse_character(id: u8, data: Field) -> crate::Result<Character> {\n        // these asserts could be disabled for production\n        assert(WIDTH <= 32);\n        assert(HEIGHT <= 16);\n        assert(CLASS_COUNT <= 8);\n        assert(STATUS_COUNT <= 16);\n\n        let split = data.to_be_bytes(32);\n        let x_packed = split[2 + id * 6]; // 5 bit x, 3 bit class\n        let y_packed = split[2 + id * 6 + 1]; // 4 bit y, 4 bit status\n        let target_x_packed = split[2 + id * 6 + 3]; // 5 bit target x, 1 bit visible, 1 bit has target, 1 bit unused\n        let target_y_packed = split[2 + id * 6 + 4]; // 4 bit target y, 4 bit unused\n        // one byte left for future use\n\n        let is_visible = ((target_x_packed >> 5) & 1) as u1;\n\n        let x = x_packed & 31;\n        let y = y_packed & 15;\n        let class = (x_packed >> 5) & 7;\n        let status = (y_packed >> 4) & 15;\n        let health = split[2 + id * 6 + 2];\n        let target_x = target_x_packed & 31;\n        let target_y = target_y_packed & 15;\n\n        let mut result = Character {\n            id: id,\n            x: x,\n            y: y,\n            class: class,\n            status: status,\n            health: health,\n            has_been_seen: is_visible, // TODO \n            target_x: target_x,\n            target_y: target_y,\n            damage: class_damage[class],\n        };\n\n        let mut success = true;\n        let has_target = (target_x_packed >> 5) & 1;\n        if has_target != 1 {\n            success &= result.set_target(255, 255);\n        }\n\n        // if is_visible != 1 {\n        //     success &= result.set_pos(255, 255);\n        // }\n        if result.get_health() == 255 {\n            success &= (is_visible != 1);\n            // result.set_pos(255, 255);\n            // assert(result.x == 255);\n            // assert(result.y == 255);\n        } /*else {\n            assert((result.x < crate::WIDTH) | (result.x == 255));\n            assert((result.y < crate::HEIGHT) | (result.y == 255));\n        }*/\n        success &= result.is_valid();\n        crate::Result {\n            value: result,\n            success: success\n        }\n    }\n}\n\npub fn get_test_my_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n    assert(id < 5);\n    assert(class < CLASS_COUNT);\n    assert(x < WIDTH);\n    assert(y < HEIGHT);\n\n    // let mut xx = x;\n    // let mut yy = y;\n    // let mut cc = class;\n\n    Character {\n        id: id,\n        x: x,\n        y: y,\n        class: class,\n        status: 0,\n        health: 100,\n        has_been_seen: 0,\n        target_x: 255,\n        target_y: 255,\n        damage: class_damage[class],\n    }\n}\n\npub fn get_test_their_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n    assert(id < 5);\n    assert(class < CLASS_COUNT);\n    assert(x < WIDTH);\n    assert(y < HEIGHT);\n\n    // let mut xx = x;\n    // let mut yy = y;\n    // let mut cc = class;\n\n    Character {\n        id: id,\n        x: x,\n        y: y,\n        class: class,\n        status: 0,\n        health: 255,\n        has_been_seen: 0,\n        target_x: 255,\n        target_y: 255,\n        damage: class_damage[class],\n    }\n}\n\n#[test]\nfn test_serialize_character() {\n    let mut character = Character {\n        id: 4,\n        x: 21,\n        y: 9,\n        class: 5,\n        status: 9,\n        health: 129,\n        has_been_seen: 0,\n        target_x: 31,\n        target_y: 15,\n        damage: class_damage[0],\n    };\n    let field_result = character.serialize();\n    assert(field_result.success);\n    let field = field_result.value;\n    assert(field[0] == (21 | (5 << 5)));\n    assert(field[1] == (9 | (9 << 4)));\n    assert(field[2] == 129);\n    assert(field[3] == 127);\n    assert(field[4] == 15);\n    assert(field[5] == 0);\n\n    assert(character.set_pos(1, 1));\n    assert(character.set_status(0));\n    assert(character.set_status(1));\n    assert(character.set_health(1));\n    assert(character.set_has_been_seen(1));\n    assert(character.set_target(255, 255));\n    let field1_result = character.serialize();\n    assert(field1_result.success);\n    let field1 = field1_result.value;\n    assert(field1[0] == (1 | (5 << 5)));\n    assert(field1[1] == (1 | (1 << 4)));\n    assert(field1[2] == 1);\n    assert(field1[3] == 63);\n    assert(field1[4] == 15);\n    assert(field1[5] == 0);\n}\n\n#[test]\nfn test_parse_character() {\n    let data_array: [u8; 32] = [\n        0 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n        255 as u8, 255 as u8, 255 as u8, 255 as u8, 255 as u8, 255 as u8,\n        181 as u8, 153 as u8, 129 as u8, 127 as u8, 15 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n    ];\n    let data: Field = std::field::bytes32_to_field(data_array);\n    println(data);\n    println(\"hallo\"); // 0xffffffffffffb599811f0f000000000000000000 != \n                      // 0xffffffffffff b599811f0f00 000000000000 0000000000\n    assert(data == 0xffffffffffffb599817f0f00000000000000, f\"Failed assumption: data: {data} != 0xffffffffffffb599817f0f000000000000000000\");\n    let character_result = Character::parse_character(3, data);\n    assert(character_result.success);\n    let character = character_result.value;\n    assert(character.get_id() == 3);\n    assert(character.get_x() == 21);\n    assert(character.get_y() == 9);\n    assert(character.get_class() == 5);\n    assert(character.get_status() == 9);\n    assert(character.get_health() == 129);\n    assert(character.get_has_been_seen() == 1);\n    assert(character.get_target_x() == 31);\n    assert(character.get_target_y() == 15);\n\n    let character_max_result = Character::parse_character(2, data);\n    assert(!character_max_result.success); // yep this one should fail!\n    let character_max = character_max_result.value;\n    assert(character_max.get_id() == 2);\n    assert(character_max.get_x() == 31);\n    assert(character_max.get_y() == 15);\n    assert(character_max.get_class() == 7);\n    assert(character_max.get_status() == 15);\n    assert(character_max.get_health() == 255);\n    assert(character_max.get_has_been_seen() == 1);\n    assert(character_max.get_target_x() == 31);\n    assert(character_max.get_target_y() == 15);\n\n    let character_min_result = Character::parse_character(0, data);\n    assert(character_min_result.success);\n    let character_min = character_min_result.value;\n    assert(character_min.get_id() == 0);\n    assert(character_min.get_x() == 0);\n    assert(character_min.get_y() == 0);\n    assert(character_min.get_class() == 0);\n    assert(character_min.get_status() == 0);\n    assert(character_min.get_health() == 0);\n    assert(character_min.get_has_been_seen() == 0);\n    assert(character_min.get_target_x() == 255);\n    assert(character_min.get_target_y() == 255);\n}\n\n#[test]\nfn test_parse_character_as_in_game() {\n    let data: Field = 0x1602ff1f0f001603ff1f0f001604ff1f0f001605ff1f0f001606ff1f0f00;\n    let character_result = Character::parse_character(0, data);\n    assert(character_result.success);\n    let character = character_result.value;\n    assert(character.get_id() == 0);\n    assert(character.get_x() == 22, character.get_x());\n    assert(character.get_y() == 2, character.get_y());\n    assert(character.get_class() == 0, character.get_class());\n    assert(character.get_status() == 0, character.get_status());\n    assert(character.get_health() == 255);\n    assert(character.get_has_been_seen() == 0);\n    assert(character.get_target_x() == 255);\n    assert(character.get_target_y() == 255);\n}\n\n#[test]\nfn test_character_setters() {\n    let mut class = ROGUE;\n    let mut character = &mut Character {\n        id: 4,\n        x: 21,\n        y: 9,\n        class: class,\n        status: 9,\n        health: 129,\n        has_been_seen: 0,\n        target_x: 31,\n        target_y: 15,\n        damage: class_damage[class],\n    };\n    assert(character.get_x() == 21);\n    assert(character.get_y() == 9);\n    assert(character.has_known_pos() == 1);\n    assert(character.set_pos(21, 8));\n    assert(character.get_x() == 21);\n    assert(character.get_y() == 8);\n    assert(character.has_known_pos() == 1);\n    assert(character.set_pos(255, 255));\n    assert(character.get_x() == 255);\n    assert(character.get_y() == 255);\n    assert(character.has_known_pos() == 0);\n\n    assert(character.get_class() == ROGUE);\n    assert(character.can_sneak());\n    assert(character.get_energy_per_sneak() == 6);\n    assert(character.get_energy_per_move() == 3);\n    assert(!character.set_class(KNIGHT));\n    (*character).class = crate::UNKNOWN_CLASS;\n    assert(character.set_class(KNIGHT));\n    assert(character.get_class() == KNIGHT);\n    assert(!character.can_sneak());\n    assert(character.get_energy_per_sneak() == 255);\n    assert(character.get_energy_per_move() == 4);\n\n    assert(character.get_status() == 9);\n    assert(character.set_status(10));\n    assert(character.get_status() == 10);\n    assert(!character.set_status(8));\n    assert(character.get_status() == 10);\n\n    assert(character.get_health() == 129);\n    assert(character.set_health(130));\n    assert(character.get_health() == 130);\n\n    assert(character.get_has_been_seen() == 0);\n    assert(character.set_has_been_seen(1));\n    assert(character.get_has_been_seen() == 1);\n    assert(character.set_has_been_seen(1));\n    assert(character.get_has_been_seen() == 1);\n    assert(!character.set_has_been_seen(0));\n    assert(character.get_has_been_seen() == 1);\n\n    assert(character.get_target_x() == 31);\n    assert(character.get_target_y() == 15);\n    assert(character.has_known_target() == 1);\n    assert(character.set_target(1, 1));\n    assert(character.get_target_x() == 1);\n    assert(character.get_target_y() == 1);\n    assert(character.has_known_target() == 1);\n    assert(character.set_target(255, 255));\n    assert(character.get_target_x() == 255);\n    assert(character.get_target_y() == 255);\n    assert(character.has_known_target() == 0);\n}\n\n\n// //crate globals;\n// use crate::globals;\n\n// use globals::get_max_width as max_width;\n// use globals::get_max_height as max_height;\n// use globals::get_class_count as class_count;\n// use globals::get_status_count as status_count;\n// use globals::get_unknown_class as unknown_class;\n\n// struct CharacterData {\n//     id: u8,\n//     x: u8, // 5 bit\n//     y: u8, // 4 bit\n//     class: u8, // 3 bit\n//     status: u8, // 0 = idle, 1-15 = continuing action => 4 bit\n//     health: u8,\n//     has_been_seen: u1,\n//     target_x: u8,\n//     target_y: u8\n// }\n\n// trait Character {\n//     fn get_id(self) -> u8;\n//     fn get_x(self) -> u8;\n//     fn get_y(self) -> u8;\n//     fn get_class(self) -> u8;\n//     fn get_status(self) -> u8;\n//     fn get_health(self) -> u8;\n//     fn get_has_been_seen(self) -> u1;\n//     fn get_target_x(self) -> u8;\n//     fn get_target_y(self) -> u8;\n//     fn set_pos(&mut self, x: u8, y: u8);\n//     fn set_class(&mut self, class: u8);\n//     fn set_status(&mut self, status: u8);\n//     fn set_health(&mut self, health: u8);\n//     fn set_has_been_seen(&mut self, has_been_seen: u1);\n//     fn set_target(&mut self, target_x: u8, target_y: u8);\n\n//     fn serialize(self) -> [u8; 6] {\n//         let packed_x = self.x | (self.class << 5);\n//         let packed_y = self.y | (self.status << 4);\n//         let packed_target_x = self.target_x;\n//         let packed_target_y = self.target_y;\n//         [packed_x, packed_y, self.health, packed_target_x, packed_target_y, 0]\n//     }\n// }\n\n// impl Character for CharacterData {\n//     fn get_id(self) -> u8 {\n//         self.id\n//     }\n\n//     fn get_x(self) -> u8 {\n//         self.x\n//     }\n\n//     fn get_y(self) -> u8 {\n//         self.y\n//     }\n\n//     fn get_class(self) -> u8 {\n//         self.class\n//     }\n\n//     fn get_status(self) -> u8 {\n//         self.status\n//     }\n\n//     fn get_health(self) -> u8 {\n//         self.health\n//     }\n\n//     fn get_has_been_seen(self) -> u1 {\n//         self.has_been_seen\n//     }\n\n//     fn get_target_x(self) -> u8 {\n//         self.target_x\n//     }\n\n//     fn get_target_y(self) -> u8 {\n//         self.target_y\n//     }\n\n//     fn set_pos(&mut self, x: u8, y: u8) {\n//         assert(((x < max_width()) & (y < max_height())) | ((x == 255) & (y == 255)));\n//         self.x = x;\n//         self.y = y;\n//     }\n\n//     fn set_class(&mut self, class: u8) {\n//         assert(class < class_count());\n//         assert((class == self.class) | (self.class == unknown_class()));\n//         self.class = class;\n//     }\n\n//     fn set_status(&mut self, status: u8) {\n//         assert(status < status_count());\n//         self.status = status;\n//     }\n\n//     fn set_health(&mut self, health: u8) {\n//         self.health = health;\n//     }\n\n//     fn set_has_been_seen(&mut self, has_been_seen: u1) {\n//         if (self.has_been_seen != has_been_seen) {\n//             assert(self.has_been_seen == 0);\n//             self.has_been_seen = has_been_seen;\n//         }\n//     }\n\n//     fn set_target(&mut self, target_x: u8, target_y: u8) {\n//         assert(((target_x < max_width()) & (target_y < max_height())) | ((target_x == 255) & (target_y == 255)));\n//         self.target_x = target_x;\n//         self.target_y = target_y;\n//     }\n// }\n\n// pub fn create_character(id: u8, x: u8, y: u8, class: u8)-> impl Character {\n//     assert((x < max_width()) & (y < max_height()));\n//     assert(class < class_count());\n//     CharacterData {\n//         id: id,\n//         x: x,\n//         y: y,\n//         class: class,\n//         status: 0,\n//         health: 0,\n//         has_been_seen: 0,\n//         target_x: 255,\n//         target_y: 255\n//     }\n// }\n\n// pub fn parse_character(id: u8, data: Field) -> impl Character {\n//     // these asserts could be disabled for production\n//     assert(max_width() <= 32 as u8);\n//     assert(max_height() <= 16);\n//     assert(class_count() <= 8);\n//     assert(status_count() <= 16);\n\n//     let split = data.to_be_bytes(32);\n//     let x_packed = split[id * 6]; // 5 bit x, 3 bit class\n//     let y_packed = split[id * 6 + 1]; // 4 bit y, 4 bit status\n//     let target_x_packed = split[id * 6 + 3]; // 5 bit target x, 3 bit unused\n//     let target_y_packed = split[id * 6 + 4]; // 4 bit target y, 4 bit unused\n//     // one byte left for future use\n\n//     let result = CharacterData {\n//         id: id,\n//         x: x_packed & 31,\n//         y: y_packed & 15,\n//         class: (x_packed >> 5) & 7,\n//         status: (y_packed >> 4) & 15,\n//         health: split[id * 6 + 2],\n//         has_been_seen: 0,\n//         target_x: target_x_packed & 31,\n//         target_y: target_y_packed & 15\n//     };\n//     if result.health == 255 {\n//         assert(result.x == 255);\n//         assert(result.y == 255);\n//     } else {\n//         assert((result.x < max_width()) | (result.x == 255));\n//         assert((result.y < max_height()) | (result.y == 255));\n//     }\n//     result\n// }\n\n// #[test]\n// fn test_serialize_character() {\n//     let character = CharacterData {\n//         id: 4,\n//         x: 21,\n//         y: 9,\n//         class: 5,\n//         status: 9,\n//         health: 129,\n//         has_been_seen: 0,\n//         target_x: 31,\n//         target_y: 15\n//     };\n//     let field = character.serialize();\n//     assert(field[0] == (21 | (5 << 5)));\n//     assert(field[1] == (9 | (9 << 4)));\n//     assert(field[2] == 129);\n//     assert(field[3] == 31);\n//     assert(field[4] == 15);\n//     assert(field[5] == 0);\n// }\n\n// #[test]\n// fn test_parse_character() {}","path":"/home/andreas/git_repositories/noir/skirmish/src/character.nr"},"56":{"source":"use crate::MAX_TRAPS;\nuse crate::TRAPS_BUFFER_SIZE;\nuse crate::WIDTH;\nuse crate::HEIGHT;\nuse dep::std;\n\nstruct Trap {\n    x: u8, // 5 bits + 1 bit for sprung + 1 bits for damage / 8, 1 bit reserved (for end detection!)\n    y: u8, // 4 bits + 4 bit damage / 16\n    sprung: &mut u8,\n    damage: u8,\n}\n\nstruct ParseTrapResult {\n    success: bool,\n    value: [Trap; TRAPS_BUFFER_SIZE],\n    count: u64,\n}\n\npub fn parse_traps(data: Field) -> ParseTrapResult {\n    let d = data.to_be_bytes(32);\n    assert(d.len() == 32);\n    let mut success = true;\n    let mut result = [Trap {\n        x: 255,\n        y: 255,\n        sprung: &mut 1,\n        damage: 0\n    }; TRAPS_BUFFER_SIZE];\n    let mut found_end = false;\n    let mut count = 0 as u64;\n    let should_count = d[1] as u64;\n    let mut sprung_buffer = [&mut 0; TRAPS_BUFFER_SIZE];\n                // assert(success == false, f\"fail: {data}\");\n    for i in 0..MAX_TRAPS {\n        let packed_x = d[2 + i * 2];\n        let packed_y = d[2 + i * 2 + 1];\n        *sprung_buffer[i] = ((packed_x >> 5) & 1);\n        result[i] = Trap {\n            x: packed_x & 31,\n            y: packed_y & 15,\n            sprung: sprung_buffer[i],\n            damage: (packed_y & 0xf0) | (((packed_x >> 6) & 1) << 3),\n        };\n        found_end |= (packed_x == 255) & (packed_y == 255);\n        success &= found_end | ((result[i].x < WIDTH) & (result[i].y < HEIGHT));\n        if !found_end {\n            count += 1;\n        }\n        \n        // if (found_end == 0) & (packed_x != 255) & (packed_y != 255) {\n        //     let x = packed_x & 31;\n        //     let y = packed_y & 15;\n        //     if (x >= WIDTH) | (y >= HEIGHT) {\n        //         success = false;\n        //         // assert(success, f\"fail: {i}: {x}, {y} of {data}\");\n        //     };\n        //     result[i] = Trap {\n        //         x: x,\n        //         y: y,\n        //         sprung: sprung_buffer[i],\n        //         damage: (packed_y & 0xf0) | (((packed_x >> 6) & 1) << 3),\n        //     };\n        //     // (*result[i]).x = x;\n        //     // (*result[i]).y = y;\n        //     // (*result[i]).sprung = ((x >> 5) & 1) as u1;\n        //     // (*result[i]).damage = (y & 0xf0) | (((x >> 6) & 3) << 2);\n        //     count += 1;\n        // } else {\n        //     found_end = 1;\n        // }\n    }\n    ParseTrapResult {\n        success: success & (count == should_count),\n        value: result,\n        count: count,\n    }\n}\n\npub fn serialize_traps(count: u8, traps: [Trap; TRAPS_BUFFER_SIZE]) -> Field {\n    assert(WIDTH <= 32);\n    assert(HEIGHT <= 16);\n    let mut parts = [0x0 as u8; 32];\n    parts[1] = count;\n    for i in 0..MAX_TRAPS {\n        let y: u8 = traps[i].y;\n        //assert((i != 15) | (y == 5), f\"fail: {i}: {y}\");\n        parts[2 + i * 2] = (traps[i].x & 0x1f) | ((*traps[i].sprung) << 5) | (((traps[i].damage >> 3) & 1) << 6);\n        parts[2 + i * 2 + 1] = y | (traps[i].damage & 0xf0 as u8);\n    }\n    std::field::bytes32_to_field(parts)\n}\n\n#[test]\nfn test_parse_traps() {\n    //       0x0039 652c a0ae c3ce f481 7ac5 642f 5788 18da 39c1 77df 2b3f a5be 22da 8ff2 5000\n    //       0x6102 0212 6312 0422 2022 0632 6732 0642 6842 0a52 6b52 0c62 2d82 0e02 6ff2 5005\n    let nr = 0x000210020300FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;// 0xFF00030210; //255; //1002055755;\n    let parts = nr.to_be_bytes(32);\n    assert(parts.len() == 32);\n    assert(parts[2] == 16);\n    assert(parts[3] == 2);\n    assert(parts[4] == 3);\n    assert(parts[5] == 0);\n    assert(parts[24] == 255);\n    assert(parts[7] == 255);\n\n    let r_result = parse_traps(nr);\n    assert(r_result.count == 2);\n    assert(r_result.success);\n    let r = r_result.value;\n    assert(r.len() == TRAPS_BUFFER_SIZE);\n    assert(r[0].x == 16);\n    assert(r[0].y == 2);\n    assert(r[1].x == 3);\n    assert(r[1].y == 0);\n\n    // let ser = serialize_traps(r);\n    // assert(ser == nr);\n}\n\n#[test]\nfn test_serialize_traps() {\n    let traps = [\n        Trap { x: 1, y: 2, sprung: &mut 1, damage: 8 },\n        Trap { x: 2, y: 2, sprung: &mut 0, damage: 16 },\n        Trap { x: 3, y: 2, sprung: &mut 1, damage: 24 },\n        Trap { x: 4, y: 2, sprung: &mut 0, damage: 32 },\n        Trap { x: 5, y: 2, sprung: &mut 1, damage: 40 },\n        Trap { x: 6, y: 2, sprung: &mut 0, damage: 48 },\n        Trap { x: 7, y: 2, sprung: &mut 1, damage: 56 },\n        Trap { x: 8, y: 2, sprung: &mut 0, damage: 64 },\n        Trap { x: 9, y: 2, sprung: &mut 1, damage: 72 },\n        Trap { x: 10, y: 2, sprung: &mut 0, damage: 80 },\n        Trap { x: 11, y: 2, sprung: &mut 1, damage: 88 },\n        Trap { x: 13, y: 2, sprung: &mut 1, damage: 128 },\n        Trap { x: 14, y: 2, sprung: &mut 0, damage: 0 },\n        Trap { x: 15, y: 2, sprung: &mut 1, damage: 248 },\n        Trap { x: 16, y: 5, sprung: &mut 0, damage: 8 },\n        Trap { x: 17, y: 5, sprung: &mut 1, damage: 16},\n    ];\n    assert(traps.len() == TRAPS_BUFFER_SIZE);\n    assert(MAX_TRAPS <= TRAPS_BUFFER_SIZE);\n    let r = serialize_traps(MAX_TRAPS as u8, traps);\n    let parts = r.to_be_bytes(32);\n    //assert((16 & 0x1f) | (0 << 5) | (((8 >> 3) & 1) << 6) == 0x50);\n    //assert((2 & 15) | (8 & 0xf0) == 2);\n    //assert(traps[15].y == 5);\n    //assert(r == 0x0039652ca0aec3cef4817ac5642f578818da39c177df2b3fa5be22da8ff25000, f\"serialized {r}\");\n    //assert(r == 0x00006102021263120422202206326732064268420a526b522d820e026ff25005, f\"serialized {r}\");\n    assert(parts.len() == 32);\n\n    //let x: Field = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; //6102021263120422202206326732064268420a526b520c622d820e026ff25005;\n    // assert(x == 0x6102021263120422202206326732064268420a526b520c622d820e026ff25005);\n    let parsed = parse_traps(r);\n    assert(parsed.success);\n    assert(parsed.count == MAX_TRAPS);\n    let p = parsed.value;\n    for i in 0..MAX_TRAPS {\n        assert(p[i].x == traps[i].x);\n        assert(p[i].y == traps[i].y);\n        let should_sprung = *traps[i].sprung;\n        let should_damage = traps[i].damage;\n        let sprung = *p[i].sprung;\n        let damage = p[i].damage;\n        let sprung_data = parts[2 + i * 2];\n        let damage_data = parts[2 + i * 2 + 1];\n        let sprung_calc = ((sprung_data >> 5) & 1);\n        let damage_calc = (damage_data & 0xf0) | (((sprung_data >> 6) & 1) << 3);\n        assert(sprung == should_sprung, f\"{i}: {sprung} != {should_sprung}: {sprung_data} => {sprung_calc}\");\n        assert(damage == should_damage, f\"{i}: {damage} != {should_damage}: {damage_data} => {damage_calc}\");\n    }\n}","path":"/home/andreas/git_repositories/noir/skirmish/src/trap.nr"}},"names":["main"]}